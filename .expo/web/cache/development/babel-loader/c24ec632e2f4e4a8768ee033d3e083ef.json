{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { getBalance, getToken, readPublicKey } from \"../../api\";\nimport { styles } from \"../theme/appTheme\";\nimport { useTheme } from 'react-native-paper';\nimport { readMnemonic } from \"../../api\";\n\nvar Balance = function Balance(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mnemonic = _useState2[0],\n      setMnemonic = _useState2[1];\n\n  function leerMnemonic() {\n    var palabras;\n    return _regeneratorRuntime.async(function leerMnemonic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            palabras = readMnemonic();\n            palabras.then(function (value) {\n              setMnemonic(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  leerMnemonic();\n\n  var _useState3 = useState(Appearance.getColorScheme()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      theme = _useState4[0],\n      setTheme = _useState4[1];\n\n  Appearance.addChangeListener(function (scheme) {\n    setTheme(scheme.colorScheme);\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  useEffect(function () {\n    var backHandler = BackHandler.addEventListener(\"hardwareBackPress\", function () {\n      return true;\n    });\n    return function () {\n      return backHandler.remove();\n    };\n  }, []);\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      balance = _useState6[0],\n      setBalance = _useState6[1];\n\n  function obtenerBalance(publicKey) {\n    return _regeneratorRuntime.async(function obtenerBalance$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getBalance(publicKey).then(function (value) {\n              setBalance(value);\n            }).catch(function (error) {\n              return \"error\";\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tokenBalance = _useState8[0],\n      setTokenBalance = _useState8[1];\n\n  function obtenerTokenB(publicKey, mint) {\n    var bala;\n    return _regeneratorRuntime.async(function obtenerTokenB$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            bala = getToken(publicKey, mint).then(function (value) {\n              setTokenBalance(value);\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tokenBalanceUSDT = _useState10[0],\n      setTokenBalanceUSDT = _useState10[1];\n\n  function obtenerTokenBUSDT(publicKey, mint) {\n    var bala;\n    return _regeneratorRuntime.async(function obtenerTokenBUSDT$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            bala = getToken(publicKey, mint).then(function (value) {\n              setTokenBalanceUSDT(value);\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      pKey = _useState12[0],\n      setPKey = _useState12[1];\n\n  readPublicKey().then(function (val) {\n    setPKey(val);\n  });\n  useEffect(function () {\n    obtenerTokenBUSDT(pKey, \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\n    obtenerTokenB(pKey, \"FmqkfdN9QXanfMpJoZmAuNC8jkhnb9aC3NrYn5JM62MU\");\n    obtenerBalance(pKey);\n  });\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      refresh = _useState14[0],\n      setRefresh = _useState14[1];\n\n  var onRefre = function onRefre() {\n    setRefresh(true);\n    setTimeout(function () {\n      setRefresh(false);\n    }, 1000);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: [styles.body, {\n      backgroundColor: colors.background\n    }]\n  }, React.createElement(StatusBar, {\n    backgroundColor: colors.background,\n    barStyle: theme === 'dark' ? \"light-content\" : \"dark-content\"\n  }), React.createElement(View, {\n    style: [styles.completo, {\n      backgroundColor: colors.background\n    }]\n  }, React.createElement(Image, {\n    style: styles.logocolorB,\n    source: require(\"./img/logocolor.png\")\n  }), React.createElement(SafeAreaView, {\n    style: styles.balancecry\n  }, React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refresh,\n      onRefresh: onRefre,\n      tintColor: \"#5b298a\",\n      colors: [\"#5b298a\", \"#7e54a7\"]\n    }),\n    horizontal: false,\n    showsVerticalScrollIndicator: false\n  }, React.createElement(TouchableOpacity, {\n    style: styles.tablacry,\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return navigation.navigate(\"Moneda\", {\n        msg: \"Condorcoin\",\n        mon: \"(CNDR)\",\n        mint: \"FmqkfdN9QXanfMpJoZmAuNC8jkhnb9aC3NrYn5JM62MU\",\n        memo: mnemonic\n      });\n    }\n  }, React.createElement(View, {\n    style: styles.logocry\n  }, React.createElement(Image, {\n    style: styles.imgcry,\n    source: require(\"./img/billeteras/logocondor.png\")\n  })), React.createElement(View, {\n    style: styles.nombrecry\n  }, React.createElement(Text, {\n    style: styles.ntxtcry\n  }, \"CONDORCOIN\")), React.createElement(View, {\n    style: styles.smcry\n  }, React.createElement(View, {\n    style: styles.saldocry\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.stxtcry\n  }, tokenBalance)), React.createElement(View, {\n    style: styles.monedacry\n  }, React.createElement(Text, {\n    style: styles.mtxtcry\n  }, \"CNDR\")))), React.createElement(TouchableOpacity, {\n    style: styles.tablacry,\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return navigation.navigate(\"Moneda\", {\n        msg: \"Solana\",\n        mon: \"(SOL)\",\n        mint: \"So11111111111111111111111111111111111111112\",\n        memo: mnemonic\n      });\n    }\n  }, React.createElement(View, {\n    style: styles.logocry\n  }, React.createElement(Image, {\n    style: styles.imgcry,\n    source: require(\"./img/billeteras/solana.png\")\n  })), React.createElement(View, {\n    style: styles.nombrecry\n  }, React.createElement(Text, {\n    style: styles.ntxtcry\n  }, \"SOLANA\")), React.createElement(View, {\n    style: styles.smcry\n  }, React.createElement(View, {\n    style: styles.saldocry\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.stxtcry\n  }, balance)), React.createElement(View, {\n    style: styles.monedacry\n  }, React.createElement(Text, {\n    style: styles.mtxtcry\n  }, \"SOL\")))), React.createElement(TouchableOpacity, {\n    style: styles.tablacry,\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return navigation.navigate(\"Moneda\", {\n        msg: \"Tether\",\n        mon: \"(USDT)\",\n        mint: \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n        memo: mnemonic\n      });\n    }\n  }, React.createElement(View, {\n    style: styles.logocry\n  }, React.createElement(Image, {\n    style: styles.imgcry,\n    source: require(\"./img/billeteras/tether.png\")\n  })), React.createElement(View, {\n    style: styles.nombrecry\n  }, React.createElement(Text, {\n    style: styles.ntxtcry\n  }, \"TETHER\")), React.createElement(View, {\n    style: styles.smcry\n  }, React.createElement(View, {\n    style: styles.saldocry\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.stxtcry\n  }, tokenBalanceUSDT)), React.createElement(View, {\n    style: styles.monedacry\n  }, React.createElement(Text, {\n    style: styles.mtxtcry\n  }, \"USDT\"))))))));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/Balance.tsx"],"names":["React","useState","useEffect","getBalance","getToken","readPublicKey","styles","useTheme","readMnemonic","Balance","navigation","mnemonic","setMnemonic","leerMnemonic","palabras","then","value","Appearance","getColorScheme","theme","setTheme","addChangeListener","scheme","colorScheme","colors","backHandler","BackHandler","addEventListener","remove","balance","setBalance","obtenerBalance","publicKey","catch","error","tokenBalance","setTokenBalance","obtenerTokenB","mint","bala","tokenBalanceUSDT","setTokenBalanceUSDT","obtenerTokenBUSDT","pKey","setPKey","val","refresh","setRefresh","onRefre","setTimeout","body","backgroundColor","background","completo","logocolorB","require","balancecry","tablacry","navigate","msg","mon","memo","logocry","imgcry","nombrecry","ntxtcry","smcry","saldocry","stxtcry","monedacry","mtxtcry"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Image,\r\n  BackHandler,\r\n  ScrollView,\r\n  RefreshControl,\r\n  SafeAreaView,\r\n  StatusBar,\r\n  Appearance,\r\n} from \"react-native\";\r\nimport { getBalance, getToken, readPublicKey } from \"../../api\";\r\nimport { styles } from \"../theme/appTheme\";\r\nimport { useTheme } from 'react-native-paper';\r\nimport { readMnemonic } from \"../../api\";\r\n\r\n\r\nconst Balance = ({ navigation }: { navigation: any }) => {\r\n\r\n  const [mnemonic, setMnemonic] = useState(\"\")\r\n\r\n  async function leerMnemonic(){\r\n    const palabras = readMnemonic()\r\n    palabras.then((value) => {\r\n      setMnemonic(value)\r\n    })\r\n  }\r\n\r\n  leerMnemonic()\r\n  \r\n  //Detecta el modo del sistema\r\n  const [theme,setTheme] = useState(Appearance.getColorScheme());\r\n  Appearance.addChangeListener((scheme)=>{\r\n    setTheme(scheme.colorScheme);\r\n  })\r\n  const { colors } = useTheme();\r\n\r\n  useEffect(() => {\r\n    const backHandler = BackHandler.addEventListener(\r\n      \"hardwareBackPress\",\r\n      () => true\r\n    );\r\n    return () => backHandler.remove();\r\n  }, []);\r\n\r\n  //Funcion obtener balance\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  async function obtenerBalance(publicKey: string) {\r\n    getBalance(publicKey)\r\n      .then((value) => {\r\n        setBalance(value);\r\n      })\r\n      .catch((error) => {\r\n        return \"error\";\r\n      });\r\n  }\r\n\r\n  //Funcion de obtener splToken\r\n  const [tokenBalance, setTokenBalance] = useState(0);\r\n\r\n  async function obtenerTokenB(publicKey: string, mint: string) {\r\n    const bala = getToken(publicKey, mint).then((value) => {\r\n      setTokenBalance(value);\r\n    });\r\n  }\r\n\r\n  //Funcion de obtener splToken USDT\r\n  const [tokenBalanceUSDT, setTokenBalanceUSDT] = useState(0);\r\n\r\n  async function obtenerTokenBUSDT(publicKey: string, mint: string) {\r\n    const bala = getToken(publicKey, mint).then((value) => {\r\n      setTokenBalanceUSDT(value);\r\n    });\r\n  }\r\n\r\n  //funcion obtener llave publica\r\n  const [pKey, setPKey] = useState(\"\");\r\n  readPublicKey().then((val) => {\r\n    setPKey(val);\r\n  });\r\n\r\n  useEffect(() => {\r\n    //obtener token de USDT(ESTO SOLO SE USA EN LA MAINNET)\r\n    obtenerTokenBUSDT(pKey, \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\n    //obtener balance del token\r\n    obtenerTokenB(pKey, \"FmqkfdN9QXanfMpJoZmAuNC8jkhnb9aC3NrYn5JM62MU\");\r\n    //obtener balance solanas\r\n    obtenerBalance(pKey);\r\n  });\r\n\r\n  // // refresco\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  const onRefre = () => {\r\n    setRefresh(true);\r\n\r\n    setTimeout(() => {\r\n      setRefresh(false);\r\n    }, 1000);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <SafeAreaView style={[styles.body,{backgroundColor:colors.background}]}>\r\n      <StatusBar \r\n        backgroundColor= {colors.background}\r\n        barStyle={theme === 'dark' ?  \"light-content\" : \"dark-content\"} \r\n      />\r\n      <View style={[styles.completo,{backgroundColor:colors.background}]}>\r\n        <Image\r\n          style={styles.logocolorB}\r\n          source={require(\"./img/logocolor.png\")}\r\n        />\r\n        <SafeAreaView style={styles.balancecry}>\r\n          <ScrollView\r\n            refreshControl={\r\n              <RefreshControl\r\n                refreshing={refresh}\r\n                onRefresh={onRefre}\r\n                tintColor=\"#5b298a\"\r\n                colors={[\"#5b298a\", \"#7e54a7\"]}\r\n              />\r\n            }\r\n            horizontal={false}\r\n            showsVerticalScrollIndicator={false}\r\n          >\r\n            {/* CONDOR */}\r\n            <TouchableOpacity style={styles.tablacry} activeOpacity={0.5} onPress={() => navigation.navigate(\"Moneda\",{msg:\"Condorcoin\", mon:\"(CNDR)\", mint:\"FmqkfdN9QXanfMpJoZmAuNC8jkhnb9aC3NrYn5JM62MU\", memo:mnemonic})}>\r\n              <View style={styles.logocry}>\r\n                <Image\r\n                  style={styles.imgcry}\r\n                  source={require(\"./img/billeteras/logocondor.png\")}\r\n                />\r\n              </View>\r\n              <View style={styles.nombrecry}>\r\n                <Text style={styles.ntxtcry}>CONDORCOIN</Text>\r\n              </View>\r\n              <View style={styles.smcry}>\r\n                <View style={styles.saldocry}>\r\n                  <Text numberOfLines={1} style={styles.stxtcry}>\r\n                    {tokenBalance}\r\n                  </Text>\r\n                </View>\r\n                <View style={styles.monedacry}>\r\n                  <Text style={styles.mtxtcry}>CNDR</Text>\r\n                </View>\r\n              </View>\r\n            </TouchableOpacity>\r\n\r\n            {/* SOLANA */}\r\n            <TouchableOpacity style={styles.tablacry} activeOpacity={0.5} onPress={() => navigation.navigate(\"Moneda\",{msg:\"Solana\", mon:\"(SOL)\", mint:\"So11111111111111111111111111111111111111112\", memo:mnemonic})}>\r\n              <View style={styles.logocry}>\r\n                <Image\r\n                  style={styles.imgcry}\r\n                  source={require(\"./img/billeteras/solana.png\")}\r\n                />\r\n              </View>\r\n              <View style={styles.nombrecry}>\r\n                <Text style={styles.ntxtcry}>SOLANA</Text>\r\n              </View>\r\n              <View style={styles.smcry}>\r\n                <View style={styles.saldocry}>\r\n                  <Text numberOfLines={1} style={styles.stxtcry}>{balance}</Text>\r\n                </View>\r\n                <View style={styles.monedacry}>\r\n                  <Text style={styles.mtxtcry}>SOL</Text>\r\n                </View>\r\n              </View>\r\n            </TouchableOpacity>\r\n\r\n            {/* USDT */}\r\n            <TouchableOpacity style={styles.tablacry} activeOpacity={0.5} onPress={() => navigation.navigate(\"Moneda\",{msg:\"Tether\", mon:\"(USDT)\", mint:\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", memo:mnemonic})}>\r\n              <View style={styles.logocry}>\r\n                <Image\r\n                  style={styles.imgcry}\r\n                  source={require(\"./img/billeteras/tether.png\")}\r\n                />\r\n              </View>\r\n              <View style={styles.nombrecry}>\r\n                <Text style={styles.ntxtcry}>TETHER</Text>\r\n              </View>\r\n              <View style={styles.smcry}>\r\n                <View style={styles.saldocry}>\r\n                  <Text numberOfLines={1} style={styles.stxtcry}>{tokenBalanceUSDT}</Text>\r\n                </View>\r\n                <View style={styles.monedacry}>\r\n                  <Text style={styles.mtxtcry}>USDT</Text>\r\n                </View>\r\n              </View>\r\n            </TouchableOpacity>           \r\n          </ScrollView>\r\n        </SafeAreaView>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n"]},"metadata":{},"sourceType":"module"}