{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { PublicKey } from '@solana/web3.js';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Random from \"expo-random\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport nacl from \"tweetnacl\";\nvar SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\";\nvar SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nvar LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL;\n\nfunction saveKey(data) {\n  return _regeneratorRuntime.async(function saveKey$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"KEY:\");\n          _context.t0 = console;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Key', data));\n\n        case 5:\n          _context.t1 = _context.sent;\n\n          _context.t0.log.call(_context.t0, _context.t1);\n\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t2 = _context[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readKey() {\n  var key;\n  return _regeneratorRuntime.async(function readKey$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log(\"READ KEY:\");\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Key'));\n\n        case 4:\n          key = _context2.sent;\n          console.log(key);\n          _context2.next = 10;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction saveMmemonic(data) {\n  return _regeneratorRuntime.async(function saveMmemonic$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(\"MNEMONIC:\");\n          _context3.t0 = console;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Mnemonic', data));\n\n        case 5:\n          _context3.t1 = _context3.sent;\n\n          _context3.t0.log.call(_context3.t0, _context3.t1);\n\n          _context3.next = 11;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t2 = _context3[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readMnemonic() {\n  var key;\n  return _regeneratorRuntime.async(function readMnemonic$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          console.log(\"READ MNEMONIC:\");\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Mnemonic'));\n\n        case 4:\n          key = _context4.sent;\n          console.log(key);\n          _context4.next = 10;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction savePassword(data) {\n  return _regeneratorRuntime.async(function savePassword$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(\"PASSWORD:\");\n          _context5.t0 = console;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Pass', data));\n\n        case 5:\n          _context5.t1 = _context5.sent;\n\n          _context5.t0.log.call(_context5.t0, _context5.t1);\n\n          _context5.next = 11;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t2 = _context5[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readPassword() {\n  return _regeneratorRuntime.async(function readPassword$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log(\"READ PASSWORD:\");\n          _context6.t0 = console;\n          _context6.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Pass'));\n\n        case 5:\n          _context6.t1 = _context6.sent;\n\n          _context6.t0.log.call(_context6.t0, _context6.t1);\n\n          _context6.next = 11;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t2 = _context6[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction generateMnemonic() {\n  var randomBytes, mnemonic;\n  return _regeneratorRuntime.async(function generateMnemonic$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(Random.getRandomBytesAsync(16));\n\n        case 2:\n          randomBytes = _context7.sent;\n          mnemonic = ethers.utils.entropyToMnemonic(randomBytes);\n          saveMmemonic(mnemonic);\n          return _context7.abrupt(\"return\", mnemonic);\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar mnemonicToSeed = function mnemonicToSeed(mnemonic) {\n  return _regeneratorRuntime.async(function mnemonicToSeed$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          return _context8.abrupt(\"return\", ethers.utils.mnemonicToSeed(mnemonic).toString());\n\n        case 4:\n          _context8.prev = 4;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.log(_context8.t0);\n          return _context8.abrupt(\"return\", \"error\");\n\n        case 8:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[0, 4]], Promise);\n};\n\nfunction createAccount(seed) {\n  var hex, keyPair, acc;\n  return _regeneratorRuntime.async(function createAccount$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          hex = Uint8Array.from(Buffer.from(seed));\n          keyPair = nacl.sign.keyPair.fromSeed(hex.slice(0, 32));\n          acc = new solanaWeb3.Account(keyPair.secretKey);\n          saveKey(keyPair.secretKey.toString());\n          return _context9.abrupt(\"return\", acc);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createConnection(cluster) {\n  return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster));\n}\n\nfunction getBalance(publicKey) {\n  var connection, lamports, sol;\n  return _regeneratorRuntime.async(function getBalance$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context10.next = 3;\n          return _regeneratorRuntime.awrap(connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          lamports = _context10.sent;\n          sol = lamports / LAMPORTS_PER_SOL;\n          return _context10.abrupt(\"return\", sol);\n\n        case 6:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  return _regeneratorRuntime.async(function findAssociatedTokenAddress$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(solanaWeb3.PublicKey.findProgramAddress([walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID));\n\n        case 2:\n          return _context11.abrupt(\"return\", _context11.sent[0]);\n\n        case 3:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getToken(publicKey, splToken) {\n  var connection, account, balance;\n  return _regeneratorRuntime.async(function getToken$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context12.next = 3;\n          return _regeneratorRuntime.awrap(findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken)));\n\n        case 3:\n          account = _context12.sent;\n          _context12.prev = 4;\n          _context12.next = 7;\n          return _regeneratorRuntime.awrap(connection.getTokenAccountBalance(new PublicKey(account.toString())));\n\n        case 7:\n          balance = _context12.sent;\n          return _context12.abrupt(\"return\", balance.value.uiAmount);\n\n        case 11:\n          _context12.prev = 11;\n          _context12.t0 = _context12[\"catch\"](4);\n          return _context12.abrupt(\"return\", 0);\n\n        case 14:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, [[4, 11]], Promise);\n}\n\nfunction sendTokenTransaction(toPublic, splToken, amount) {\n  var connection, DEMO_WALLET_SECRET_KEY, fromWallet, toWallet, myMint, myToken, fromTokenAccount, toTokenAccount, transaction, signature;\n  return _regeneratorRuntime.async(function sendTokenTransaction$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          DEMO_WALLET_SECRET_KEY = new Uint8Array([48, 120, 100, 99, 102, 50, 56, 50, 51, 102, 100, 51, 101, 101, 101, 99, 51, 49, 100, 54, 53, 102, 56, 100, 50, 49, 101, 54, 97, 48, 57, 98, 189, 161, 122, 102, 109, 24, 251, 64, 171, 179, 19, 248, 192, 171, 203, 109, 61, 170, 248, 164, 223, 240, 174, 12, 33, 6, 139, 185, 61, 115, 183, 169]);\n          fromWallet = new solanaWeb3.Account(DEMO_WALLET_SECRET_KEY);\n          console.log(fromWallet.publicKey.toString());\n          console.log(readMnemonic());\n          toWallet = new solanaWeb3.PublicKey(toPublic);\n          myMint = new solanaWeb3.PublicKey(splToken);\n          myToken = new Token(connection, myMint, TOKEN_PROGRAM_ID, fromWallet);\n          _context13.next = 10;\n          return _regeneratorRuntime.awrap(myToken.getOrCreateAssociatedAccountInfo(fromWallet.publicKey));\n\n        case 10:\n          fromTokenAccount = _context13.sent;\n          _context13.next = 13;\n          return _regeneratorRuntime.awrap(myToken.getOrCreateAssociatedAccountInfo(new solanaWeb3.PublicKey(toPublic)));\n\n        case 13:\n          toTokenAccount = _context13.sent;\n          transaction = new solanaWeb3.Transaction().add(Token.createTransferInstruction(TOKEN_PROGRAM_ID, fromTokenAccount.address, toTokenAccount.address, fromWallet.publicKey, [], amount * LAMPORTS_PER_SOL));\n          _context13.next = 17;\n          return _regeneratorRuntime.awrap(solanaWeb3.sendAndConfirmTransaction(connection, transaction, [fromWallet]));\n\n        case 17:\n          signature = _context13.sent;\n          console.log(\"SIGNATURE\", signature);\n          console.log(\"SUCCESS\");\n\n        case 20:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getHistory(pubKey) {\n  var options,\n      connection,\n      history,\n      _args14 = arguments;\n  return _regeneratorRuntime.async(function getHistory$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {\n            limit: 20\n          };\n          connection = createConnection(\"mainnet-beta\");\n          _context14.next = 4;\n          return _regeneratorRuntime.awrap(connection.getConfirmedSignaturesForAddress2(new PublicKey(pubKey), options));\n\n        case 4:\n          history = _context14.sent;\n          console.log(history);\n          return _context14.abrupt(\"return\", history);\n\n        case 7:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken, sendTokenTransaction, saveKey, readKey, getHistory, saveMmemonic, readMnemonic };","map":{"version":3,"sources":["C:/Users/USER/Desktop/Proyectos/WalletRN/backup/Mountain-Walletdos/api/index.ts"],"names":["solanaWeb3","TOKEN_PROGRAM_ID","Token","PublicKey","AsyncStorage","Random","ethers","Buffer","nacl","SPL_TOKEN","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","LAMPORTS_PER_SOL","saveKey","data","console","log","setItem","readKey","getItem","key","saveMmemonic","readMnemonic","savePassword","readPassword","generateMnemonic","getRandomBytesAsync","randomBytes","mnemonic","utils","entropyToMnemonic","mnemonicToSeed","toString","createAccount","seed","hex","Uint8Array","from","keyPair","sign","fromSeed","slice","acc","Account","secretKey","createConnection","cluster","Connection","clusterApiUrl","getBalance","publicKey","connection","catch","err","lamports","sol","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","getToken","splToken","account","getTokenAccountBalance","balance","value","uiAmount","sendTokenTransaction","toPublic","amount","DEMO_WALLET_SECRET_KEY","fromWallet","toWallet","myMint","myToken","getOrCreateAssociatedAccountInfo","fromTokenAccount","toTokenAccount","transaction","Transaction","add","createTransferInstruction","address","sendAndConfirmTransaction","signature","getHistory","pubKey","options","limit","getConfirmedSignaturesForAddress2","history"],"mappings":"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","sourcesContent":["import * as solanaWeb3 from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport { PublicKey, Keypair } from '@solana/web3.js';\r\n\r\nimport  AsyncStorage  from \"@react-native-async-storage/async-storage\";\r\n\r\nimport * as Random from \"expo-random\"\r\nimport { ethers } from \"ethers\"\r\nimport { Buffer } from \"buffer\"\r\nimport nacl from \"tweetnacl\"\r\n\r\n//variables\r\nconst SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\"\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\")\r\nconst LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL                                                                     \r\n\r\n\r\n\r\n//Funcion guardar llave\r\nasync function saveKey(data){\r\n  try {     \r\n    console.log(\"KEY:\");\r\n    console.log(await AsyncStorage.setItem('@storage_Key', data))  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n//Funcion leer llave\r\nasync function readKey(){\r\n  //obteniendo llave\r\n  try {    \r\n    console.log(\"READ KEY:\");\r\n    const key = await AsyncStorage.getItem('@storage_Key')\r\n    console.log(key)  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n\r\n//Funcion guardar llave\r\nasync function saveMmemonic(data){\r\n  try {     \r\n    console.log(\"MNEMONIC:\");\r\n    console.log(await AsyncStorage.setItem('@storage_Mnemonic', data))  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n//Funcion leer llave\r\nasync function readMnemonic(){\r\n  //obteniendo llave\r\n  try {    \r\n    console.log(\"READ MNEMONIC:\");\r\n    const key = await AsyncStorage.getItem('@storage_Mnemonic')\r\n    console.log(key)  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n\r\n//Funcion guardar contra\r\nasync function savePassword(data){\r\n  try {    \r\n    console.log(\"PASSWORD:\");\r\n    console.log(await AsyncStorage.setItem('@storage_Pass', data))  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n//Funcion guardar contra\r\nasync function readPassword(){\r\n  //obteniendo contra\r\n  try {    \r\n    console.log(\"READ PASSWORD:\");\r\n    console.log(await AsyncStorage.getItem('@storage_Pass'))  \r\n  } catch (e) { \r\n       // saving error  \r\n  }\r\n}\r\n\r\n\r\n//generar mnemonic\r\nasync function generateMnemonic() {\r\n    const randomBytes = await Random.getRandomBytesAsync(16);\r\n    const mnemonic = ethers.utils.entropyToMnemonic(randomBytes);\r\n    //guardando mnemonic en asyncStorage\r\n    saveMmemonic(mnemonic)     \r\n    return mnemonic\r\n}\r\n\r\n//mnemonic a semilla\r\nconst mnemonicToSeed = async (mnemonic: string) => {\r\n    try {\r\n        return ethers.utils.mnemonicToSeed(mnemonic).toString()\r\n    } catch (error) {\r\n        console.log(error);\r\n        return \"error\"\r\n    }\r\n};\r\n\r\n//crear cuenta\r\nasync function createAccount(seed: string) {\r\n    const hex = Uint8Array.from(Buffer.from(seed))\r\n    const keyPair = nacl.sign.keyPair.fromSeed(hex.slice(0, 32));\r\n    const acc = new solanaWeb3.Account(keyPair.secretKey);\r\n    saveKey(keyPair.secretKey.toString())\r\n    return acc\r\n}\r\n\r\n//crear conexion\r\nfunction createConnection(cluster:string) {\r\n    return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster))\r\n}\r\n\r\n//obtener balance de Solanas\r\nasync function getBalance(publicKey: string) {\r\n    const connection = createConnection(\"devnet\")\r\n    const lamports = await connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch((err) => {\r\n        console.log(err);\r\n    })\r\n\r\n    const sol = lamports / LAMPORTS_PER_SOL\r\n    return sol\r\n} \r\n\r\n//buscar cuentas asociadas a tokens\r\nasync function findAssociatedTokenAddress(\r\n    walletAddress: PublicKey,\r\n    tokenMintAddress: PublicKey\r\n  ): Promise<PublicKey> {\r\n    return (\r\n      await solanaWeb3.PublicKey.findProgramAddress(\r\n        [\r\n          walletAddress.toBuffer(),\r\n          TOKEN_PROGRAM_ID.toBuffer(),\r\n          tokenMintAddress.toBuffer(),\r\n        ],\r\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n      )\r\n    )[0];\r\n  }\r\n\r\n//obtener balance del token\r\nasync function getToken(publicKey: string, splToken: string){\r\n    const connection = createConnection(\"devnet\")\r\n    const account = await findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken))\r\n\r\n  try {\r\n    const balance = await connection.getTokenAccountBalance(new PublicKey(account.toString()))\r\n    return balance.value.uiAmount\r\n  } catch (e) {\r\n    return 0\r\n  }\r\n\r\n}\r\n\r\n//enviar transaccion\r\nasync function sendTokenTransaction( toPublic: string, splToken: string, amount: number) {\r\n  const connection = createConnection(\"devnet\")\r\n\r\n  //prueba con la llave\r\n  const DEMO_WALLET_SECRET_KEY = new Uint8Array([48,120,100,99,102,50,56,50,51,102,100,51,101,101,101,99,51,49,100,54,53,102,56,100,50,49,101,54,97,48,57,98,189,161,122,102,109,24,251,64,171,179,19,248,192,171,203,109,61,170,248,164,223,240,174,12,33,6,139,185,61,115,183,169]); \r\n  var fromWallet = new solanaWeb3.Account(DEMO_WALLET_SECRET_KEY);\r\n  console.log(fromWallet.publicKey.toString());\r\n  console.log(readMnemonic());\r\n  \r\n  \r\n  //const fromWallet = wallet\r\n  const toWallet = new solanaWeb3.PublicKey(toPublic)\r\n  const myMint = new solanaWeb3.PublicKey(splToken)\r\n\r\n  var myToken = new Token(\r\n    connection,\r\n    myMint,\r\n    TOKEN_PROGRAM_ID,\r\n    fromWallet\r\n  );\r\n\r\n   // Create associated token accounts for my token if they don't exist yet\r\n   var fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\r\n    fromWallet.publicKey\r\n  )\r\n  var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\r\n    new solanaWeb3.PublicKey(toPublic)\r\n  )\r\n\r\n  var transaction = new solanaWeb3.Transaction()\r\n    .add(\r\n      Token.createTransferInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        fromTokenAccount.address,\r\n        toTokenAccount.address,\r\n        fromWallet.publicKey,\r\n        [],\r\n        amount * LAMPORTS_PER_SOL\r\n      )\r\n    )\r\n  \r\n  var signature = await solanaWeb3.sendAndConfirmTransaction(\r\n    connection,\r\n    transaction,\r\n    [fromWallet]\r\n  );\r\n  console.log(\"SIGNATURE\", signature);\r\n  console.log(\"SUCCESS\");\r\n\r\n\r\n  \r\n}\r\n\r\n// funcion para obtener el historial de transacciones\r\nasync function getHistory(pubKey:string,options = { limit: 20 }){\r\n\r\n  const connection = createConnection(\"mainnet-beta\");\r\n  const history = await connection.getConfirmedSignaturesForAddress2(\r\n  new PublicKey(pubKey),\r\n  options\r\n  );\r\n\r\n  console.log(history);\r\n  \r\nreturn history;\r\n\r\n}\r\n\r\n\r\nexport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken, sendTokenTransaction, saveKey, readKey, getHistory,saveMmemonic,readMnemonic }\r\n"]},"metadata":{},"sourceType":"module"}