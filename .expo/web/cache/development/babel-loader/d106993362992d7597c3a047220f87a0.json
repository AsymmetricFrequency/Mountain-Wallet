{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { PublicKey } from '@solana/web3.js';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Random from \"expo-random\";\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport nacl from \"tweetnacl\";\nvar SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\";\nvar SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nvar LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL;\n\nfunction saveKey(data) {\n  return _regeneratorRuntime.async(function saveKey$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"KEY:\");\n          _context.t0 = console;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Key', data));\n\n        case 5:\n          _context.t1 = _context.sent;\n\n          _context.t0.log.call(_context.t0, _context.t1);\n\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t2 = _context[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readKey() {\n  var key;\n  return _regeneratorRuntime.async(function readKey$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log(\"READ KEY:\");\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Key'));\n\n        case 4:\n          key = _context2.sent;\n          console.log(key);\n          return _context2.abrupt(\"return\", key);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction savePublicKey(data) {\n  return _regeneratorRuntime.async(function savePublicKey$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(\"SAVE PUBLIC KEY:\");\n          _context3.t0 = console;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_PublicKey', data));\n\n        case 5:\n          _context3.t1 = _context3.sent;\n\n          _context3.t0.log.call(_context3.t0, _context3.t1);\n\n          _context3.next = 11;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t2 = _context3[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readPublicKey() {\n  var key;\n  return _regeneratorRuntime.async(function readPublicKey$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          console.log(\"READ PUBLIC KEY:\");\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_PublicKey'));\n\n        case 4:\n          key = _context4.sent;\n          console.log(key);\n          return _context4.abrupt(\"return\", key);\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction saveMmemonic(data) {\n  return _regeneratorRuntime.async(function saveMmemonic$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          console.log(\"MNEMONIC:\");\n          _context5.t0 = console;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Mnemonic', data));\n\n        case 5:\n          _context5.t1 = _context5.sent;\n\n          _context5.t0.log.call(_context5.t0, _context5.t1);\n\n          _context5.next = 11;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t2 = _context5[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readMnemonic() {\n  var key;\n  return _regeneratorRuntime.async(function readMnemonic$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          console.log(\"READ MNEMONIC:\");\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Mnemonic'));\n\n        case 4:\n          key = _context6.sent;\n          console.log(key);\n          return _context6.abrupt(\"return\", key);\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction savePassword(data) {\n  return _regeneratorRuntime.async(function savePassword$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          console.log(\"PASSWORD:\");\n          _context7.t0 = console;\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Pass', data));\n\n        case 5:\n          _context7.t1 = _context7.sent;\n\n          _context7.t0.log.call(_context7.t0, _context7.t1);\n\n          _context7.next = 11;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t2 = _context7[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\n\nfunction readPassword() {\n  var password;\n  return _regeneratorRuntime.async(function readPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          console.log(\"READ PASSWORD:\");\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Pass'));\n\n        case 4:\n          password = _context8.sent;\n          return _context8.abrupt(\"return\", password);\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction generateMnemonic() {\n  var randomBytes, mnemonic;\n  return _regeneratorRuntime.async(function generateMnemonic$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(Random.getRandomBytesAsync(16));\n\n        case 2:\n          randomBytes = _context9.sent;\n          mnemonic = ethers.utils.entropyToMnemonic(randomBytes);\n          saveMmemonic(mnemonic);\n          return _context9.abrupt(\"return\", mnemonic);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar mnemonicToSeed = function mnemonicToSeed(mnemonic) {\n  return _regeneratorRuntime.async(function mnemonicToSeed$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          return _context10.abrupt(\"return\", ethers.utils.mnemonicToSeed(mnemonic).toString());\n\n        case 4:\n          _context10.prev = 4;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.log(_context10.t0);\n          return _context10.abrupt(\"return\", \"error\");\n\n        case 8:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, [[0, 4]], Promise);\n};\n\nfunction createAccount(seed) {\n  var hex, keyPair, acc;\n  return _regeneratorRuntime.async(function createAccount$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          hex = Uint8Array.from(Buffer.from(seed));\n          keyPair = nacl.sign.keyPair.fromSeed(hex.slice(0, 32));\n          acc = new solanaWeb3.Account(keyPair.secretKey);\n          saveKey(keyPair.secretKey.toString());\n          return _context11.abrupt(\"return\", acc);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createConnection(cluster) {\n  return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster));\n}\n\nfunction getBalance(publicKey) {\n  var connection, lamports, sol;\n  return _regeneratorRuntime.async(function getBalance$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context12.next = 3;\n          return _regeneratorRuntime.awrap(connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          lamports = _context12.sent;\n          sol = lamports / LAMPORTS_PER_SOL;\n          return _context12.abrupt(\"return\", sol);\n\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  return _regeneratorRuntime.async(function findAssociatedTokenAddress$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return _regeneratorRuntime.awrap(solanaWeb3.PublicKey.findProgramAddress([walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID));\n\n        case 2:\n          return _context13.abrupt(\"return\", _context13.sent[0]);\n\n        case 3:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getToken(publicKey, splToken) {\n  var connection, account, balance;\n  return _regeneratorRuntime.async(function getToken$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context14.next = 3;\n          return _regeneratorRuntime.awrap(findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken)));\n\n        case 3:\n          account = _context14.sent;\n          _context14.prev = 4;\n          _context14.next = 7;\n          return _regeneratorRuntime.awrap(connection.getTokenAccountBalance(new PublicKey(account.toString())));\n\n        case 7:\n          balance = _context14.sent;\n          return _context14.abrupt(\"return\", balance.value.uiAmount);\n\n        case 11:\n          _context14.prev = 11;\n          _context14.t0 = _context14[\"catch\"](4);\n          return _context14.abrupt(\"return\", 0);\n\n        case 14:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, [[4, 11]], Promise);\n}\n\nfunction enviarTrans(fromWallet, toPublic, amount) {\n  var connection, myMint, myToken, fromTokenAccount, toTokenAccount, transaction, signature;\n  return _regeneratorRuntime.async(function enviarTrans$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          myMint = new solanaWeb3.PublicKey(\"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\");\n          _context15.prev = 2;\n          myToken = new Token(connection, myMint, TOKEN_PROGRAM_ID, fromWallet);\n          _context15.next = 6;\n          return _regeneratorRuntime.awrap(myToken.getOrCreateAssociatedAccountInfo(fromWallet.publicKey));\n\n        case 6:\n          fromTokenAccount = _context15.sent;\n          _context15.next = 9;\n          return _regeneratorRuntime.awrap(myToken.getOrCreateAssociatedAccountInfo(new solanaWeb3.PublicKey(toPublic)));\n\n        case 9:\n          toTokenAccount = _context15.sent;\n          transaction = new solanaWeb3.Transaction().add(Token.createTransferInstruction(TOKEN_PROGRAM_ID, fromTokenAccount.address, toTokenAccount.address, fromWallet.publicKey, [], amount * LAMPORTS_PER_SOL));\n          _context15.next = 13;\n          return _regeneratorRuntime.awrap(solanaWeb3.sendAndConfirmTransaction(connection, transaction, [fromWallet]).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 13:\n          signature = _context15.sent;\n          return _context15.abrupt(\"return\", \"signature\");\n\n        case 17:\n          _context15.prev = 17;\n          _context15.t0 = _context15[\"catch\"](2);\n          return _context15.abrupt(\"return\", _context15.t0);\n\n        case 20:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, [[2, 17]], Promise);\n}\n\nfunction getHistory(pubKey) {\n  var options,\n      connection,\n      history,\n      _args16 = arguments;\n  return _regeneratorRuntime.async(function getHistory$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {\n            limit: 20\n          };\n          connection = createConnection(\"mainnet-beta\");\n          _context16.next = 4;\n          return _regeneratorRuntime.awrap(connection.getConfirmedSignaturesForAddress2(new PublicKey(pubKey), options));\n\n        case 4:\n          history = _context16.sent;\n          console.log(history);\n          return _context16.abrupt(\"return\", history);\n\n        case 7:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { savePublicKey, readPublicKey, generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken, saveKey, readKey, getHistory, saveMmemonic, readMnemonic, savePassword, readPassword, enviarTrans };","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/api/index.ts"],"names":["solanaWeb3","TOKEN_PROGRAM_ID","Token","PublicKey","AsyncStorage","Random","ethers","Buffer","nacl","SPL_TOKEN","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","LAMPORTS_PER_SOL","saveKey","data","console","log","setItem","readKey","getItem","key","savePublicKey","readPublicKey","saveMmemonic","readMnemonic","savePassword","readPassword","password","generateMnemonic","getRandomBytesAsync","randomBytes","mnemonic","utils","entropyToMnemonic","mnemonicToSeed","toString","createAccount","seed","hex","Uint8Array","from","keyPair","sign","fromSeed","slice","acc","Account","secretKey","createConnection","cluster","Connection","clusterApiUrl","getBalance","publicKey","connection","catch","err","lamports","sol","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","getToken","splToken","account","getTokenAccountBalance","balance","value","uiAmount","enviarTrans","fromWallet","toPublic","amount","myMint","myToken","getOrCreateAssociatedAccountInfo","fromTokenAccount","toTokenAccount","transaction","Transaction","add","createTransferInstruction","address","sendAndConfirmTransaction","signature","getHistory","pubKey","options","limit","getConfirmedSignaturesForAddress2","history"],"mappings":"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","sourcesContent":["import * as solanaWeb3 from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { PublicKey, Keypair } from '@solana/web3.js';\n\nimport  AsyncStorage  from \"@react-native-async-storage/async-storage\";\n\nimport * as Random from \"expo-random\"\nimport { ethers } from \"ethers\"\nimport { Buffer } from \"buffer\"\nimport nacl from \"tweetnacl\"\n\n//variables\nconst SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\"\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\")\nconst LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL                                                                     \n\n//Funcion guardar llave\nasync function saveKey(data){\n  try {     \n    console.log(\"KEY:\");\n    console.log(await AsyncStorage.setItem('@storage_Key', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion leer llave\nasync function readKey(){\n  //obteniendo llave\n  try {    \n    console.log(\"READ KEY:\");\n    const key = await AsyncStorage.getItem('@storage_Key')\n    console.log(key) \n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion guardar llave\nasync function savePublicKey(data){\n  try {     \n    console.log(\"SAVE PUBLIC KEY:\");\n    console.log(await AsyncStorage.setItem('@storage_PublicKey', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Leer la public key de la cuenta\nasync function readPublicKey(){\n  //obteniendo llave\n  try {    \n    console.log(\"READ PUBLIC KEY:\");\n    const key = await AsyncStorage.getItem('@storage_PublicKey')\n    console.log(key) \n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n\n//Funcion guardar llave\nasync function saveMmemonic(data){\n  try {     \n    console.log(\"MNEMONIC:\");\n    console.log(await AsyncStorage.setItem('@storage_Mnemonic', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion leer llave\nasync function readMnemonic(){\n  //obteniendo llave\n  try {    \n    console.log(\"READ MNEMONIC:\");\n    const key = await AsyncStorage.getItem('@storage_Mnemonic')\n    console.log(key) \n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n\n//Funcion guardar contra\nasync function savePassword(data){\n  try {    \n    console.log(\"PASSWORD:\");\n    console.log(await AsyncStorage.setItem('@storage_Pass', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion guardar contra\nasync function readPassword(){\n  //obteniendo contra\n  try {    \n    console.log(\"READ PASSWORD:\");\n    const password = await AsyncStorage.getItem('@storage_Pass')\n    return password  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n\n//generar mnemonic\nasync function generateMnemonic() {\n    const randomBytes = await Random.getRandomBytesAsync(16);\n    const mnemonic = ethers.utils.entropyToMnemonic(randomBytes);\n    //guardando mnemonic en asyncStorage\n    saveMmemonic(mnemonic)     \n    return mnemonic\n}\n\n//mnemonic a semilla\nconst mnemonicToSeed = async (mnemonic: string) => {\n    try {\n        return ethers.utils.mnemonicToSeed(mnemonic).toString()\n    } catch (error) {\n        console.log(error);\n        return \"error\"\n    }\n};\n\n//crear cuenta\nasync function createAccount(seed: string) {\n    const hex = Uint8Array.from(Buffer.from(seed))\n    const keyPair = nacl.sign.keyPair.fromSeed(hex.slice(0, 32));\n    const acc = new solanaWeb3.Account(keyPair.secretKey);\n    saveKey(keyPair.secretKey.toString())\n    return acc\n}\n\n//crear conexion\nfunction createConnection(cluster:string) {\n    return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster))\n}\n\n//obtener balance de Solanas\nasync function getBalance(publicKey: string) {\n    const connection = createConnection(\"devnet\")\n    const lamports = await connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch((err) => {\n        console.log(err);\n    })\n\n    const sol = lamports / LAMPORTS_PER_SOL\n    return sol\n} \n\n//buscar cuentas asociadas a tokens\nasync function findAssociatedTokenAddress(\n    walletAddress: PublicKey,\n    tokenMintAddress: PublicKey\n  ): Promise<PublicKey> {\n    return (\n      await solanaWeb3.PublicKey.findProgramAddress(\n        [\n          walletAddress.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n          tokenMintAddress.toBuffer(),\n        ],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  }\n\n//obtener balance del token\nasync function getToken(publicKey: string, splToken: string){\n    const connection = createConnection(\"devnet\")\n    const account = await findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken))\n\n  try {\n    const balance = await connection.getTokenAccountBalance(new PublicKey(account.toString()))\n    return balance.value.uiAmount\n  } catch (e) {\n    return 0\n  }\n\n}\n\nasync function enviarTrans(fromWallet,toPublic,amount){\n  const connection = createConnection(\"devnet\")\n  const myMint = new solanaWeb3.PublicKey(\"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\")\n\n  try {\n    var myToken = new Token(\n      connection,\n      myMint,\n      TOKEN_PROGRAM_ID,\n      fromWallet\n    )\n            \n    var fromTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\n      fromWallet.publicKey\n    )\n    var toTokenAccount = await myToken.getOrCreateAssociatedAccountInfo(\n      new solanaWeb3.PublicKey(toPublic)\n    )\n  \n    var transaction = new solanaWeb3.Transaction()\n    .add(\n      Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        fromTokenAccount.address,\n        toTokenAccount.address,\n        fromWallet.publicKey,\n        [],\n        amount * LAMPORTS_PER_SOL\n      )\n    )\n\n    var signature = await solanaWeb3.sendAndConfirmTransaction(\n      connection,\n      transaction,\n      [fromWallet]\n    ).catch((err) => {\n      console.log(err)\n    })\n    return \"signature\"\n    } catch (error) {\n      return error\n  }\n}\n\n// funcion para obtener el historial de transacciones\nasync function getHistory(pubKey:string,options = { limit: 20 }){\n\n  const connection = createConnection(\"mainnet-beta\");\n  const history = await connection.getConfirmedSignaturesForAddress2(\n  new PublicKey(pubKey),\n  options\n  );\n\n  console.log(history);\n  \nreturn history;\n\n}\n\n\nexport { \n  savePublicKey,\n  readPublicKey,\n  generateMnemonic,\n  mnemonicToSeed,\n  createAccount,\n  getBalance,\n  getToken,\n  saveKey,\n  readKey,\n  getHistory,\n  saveMmemonic,\n  readMnemonic,\n  savePassword, \n  readPassword,\n  enviarTrans \n}\n"]},"metadata":{},"sourceType":"module"}