{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nimport React, { useState } from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Icon from \"@expo/vector-icons/Feather\";\nimport { styles } from \"../theme/appTheme\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { sendSoles } from \"../../api\";\nimport { sendSPL } from \"../../api\";\nvar altura = Platform.OS === \"ios\" ? 22 : 25;\n\nvar EnviarDireccion = function EnviarDireccion(_ref) {\n  var _route$params, _route$params2;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      copiedText = _useState2[0],\n      setCopiedText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toPublic = _useState4[0],\n      setToPublic = _useState4[1];\n\n  var pinN = route.params.pinN;\n  var abrev = route.params.abrev;\n  var titleMoneda = route.params.titleMoneda;\n  var mnemonic = (_route$params = route.params) == null ? void 0 : _route$params.memo;\n  var mint = (_route$params2 = route.params) == null ? void 0 : _route$params2.mint;\n\n  function enviarSoles() {\n    var transaccion;\n    return _regeneratorRuntime.async(function enviarSoles$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transaccion = sendSoles(mnemonic, toPublic, Number(pinN));\n            transaccion.then(function (value) {\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function enviarSPL() {\n    var transaccion;\n    return _regeneratorRuntime.async(function enviarSPL$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            transaccion = sendSPL(mnemonic, toPublic, Number(pinN), mint);\n            transaccion.then(function (value) {\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var imag = function imag() {\n    if (titleMoneda == \"Condorcoin\") {\n      return React.createElement(Image, {\n        style: styles.imgmoneda,\n        source: require(\"./img/billeteras/logocondor.png\")\n      });\n    } else if (titleMoneda == \"Solana\") {\n      return React.createElement(Image, {\n        style: styles.imgmoneda,\n        source: require(\"./img/billeteras/solana.png\")\n      });\n    } else if (titleMoneda == \"Tether\") {\n      return React.createElement(Image, {\n        style: styles.imgmoneda,\n        source: require(\"./img/billeteras/tether.png\")\n      });\n    }\n  };\n\n  var fetchCopiedText = function fetchCopiedText() {\n    var text;\n    return _regeneratorRuntime.async(function fetchCopiedText$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(Clipboard.getString());\n\n          case 2:\n            text = _context3.sent;\n            setCopiedText(text);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    style: styles.body\n  }, React.createElement(StatusBar, {\n    backgroundColor: \"#FBF7FF\",\n    barStyle: \"dark-content\"\n  }), React.createElement(View, {\n    style: styles.completo\n  }, React.createElement(View, {\n    style: styles.titlecc\n  }, React.createElement(Text, {\n    style: styles.titletx\n  }, \"Enviar \", titleMoneda)), React.createElement(View, {\n    style: styles.logorb\n  }, imag()), React.createElement(View, {\n    style: styles.cajaatras\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: styles.btndo,\n    onPress: function onPress() {\n      return navigation.goBack();\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-left\",\n    size: altura,\n    color: \"#440577\"\n  }))), React.createElement(View, {\n    style: styles.textInput\n  }, React.createElement(Text, {\n    style: styles.icnt\n  }, \"Cantidad\"), React.createElement(View, {\n    style: styles.txtAjustables\n  }, React.createElement(TextInput, {\n    style: styles.cantidadRecibe,\n    editable: false,\n    placeholder: \"0\"\n  }, pinN))), React.createElement(View, {\n    style: styles.contCndr\n  }, React.createElement(Text, {\n    style: styles.cndrR\n  }, abrev), React.createElement(Text, {\n    style: styles.valorR\n  }, \"$ 0.00\")), React.createElement(View, {\n    style: styles.pegarDireccion\n  }, React.createElement(View, {\n    style: {\n      width: \"55%\"\n    }\n  }, React.createElement(TextInput, {\n    style: styles.pegaDir,\n    onChangeText: function onChangeText(val) {\n      return setToPublic(val);\n    },\n    placeholder: \"Pegar direcci\\xF3n\"\n  }, copiedText)), React.createElement(View, {\n    style: styles.iconos\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return fetchCopiedText();\n    }\n  }, React.createElement(Image, {\n    style: styles.clipboard,\n    source: require(\"./img/Paste-clipboard.png\")\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"QrReader\");\n    }\n  }, React.createElement(Image, {\n    style: styles.qr,\n    source: require(\"./img/qr-enviar.png\")\n  })))), titleMoneda == \"Solana\" && React.createElement(View, {\n    style: styles.btnEnviar\n  }, React.createElement(TouchableOpacity, {\n    style: styles.btnCont,\n    onPress: function onPress() {\n      return [enviarSoles(), navigation.navigate('Balance')];\n    }\n  }, React.createElement(Text, {\n    style: styles.txtEnviar\n  }, \"Enviar\"))), titleMoneda != \"Solana\" && React.createElement(View, {\n    style: styles.btnEnviar\n  }, React.createElement(TouchableOpacity, {\n    style: styles.btnCont,\n    onPress: function onPress() {\n      return [enviarSPL(), navigation.navigate('Balance')];\n    }\n  }, React.createElement(Text, {\n    style: styles.txtEnviar\n  }, \"Enviar\")))));\n};\n\nexport default EnviarDireccion;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/EnviarDireccion.tsx"],"names":["React","useState","TouchableOpacity","Icon","styles","KeyboardAwareScrollView","sendSoles","sendSPL","altura","Platform","OS","EnviarDireccion","navigation","route","copiedText","setCopiedText","toPublic","setToPublic","pinN","params","abrev","titleMoneda","mnemonic","memo","mint","enviarSoles","transaccion","Number","then","value","console","log","enviarSPL","imag","imgmoneda","require","fetchCopiedText","Clipboard","getString","text","body","completo","titlecc","titletx","logorb","cajaatras","btndo","goBack","textInput","icnt","txtAjustables","cantidadRecibe","contCndr","cndrR","valorR","pegarDireccion","width","pegaDir","val","iconos","clipboard","navigate","qr","btnEnviar","btnCont","txtEnviar"],"mappings":"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","sourcesContent":["import {\n  Image,\n  Platform,\n  StatusBar,\n  Text,\n  TextInput,\n  View,\n  Clipboard,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Icon from \"react-native-vector-icons/Feather\";\nimport { styles } from \"../theme/appTheme\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\n\nimport { sendSoles } from \"../../api\";\nimport { sendSPL } from \"../../api\";\n\nconst altura = Platform.OS === \"ios\" ? 22 : 25;\n\nconst EnviarDireccion = ({\n  navigation,\n  route,\n}: {\n  navigation: any;\n  route: any;\n}) => {\n  const [copiedText, setCopiedText] = useState(\"\");\n  const [toPublic, setToPublic] = useState(\"\");\n\n  const { pinN } = route.params;\n  const { abrev } = route.params;\n  const { titleMoneda } = route.params;\n  const mnemonic = route.params?.memo\n  const mint = route.params?.mint\n\n  async function enviarSoles() {\n    const transaccion = sendSoles(mnemonic, toPublic, Number(pinN))\n    transaccion.then((value) => {\n      console.log(value)\n    })\n  }\n\n  async function enviarSPL() {\n    const transaccion = sendSPL(mnemonic, toPublic, Number(pinN),mint)\n    transaccion.then((value) => {\n      console.log(value)\n    })\n  }\n\n  const imag = () => {\n    if (titleMoneda == \"Condorcoin\") {\n      return (\n        <Image\n          style={styles.imgmoneda}\n          source={require(\"./img/billeteras/logocondor.png\")}\n        />\n      );\n    } else if (titleMoneda == \"Solana\") {\n      return (\n        <Image\n          style={styles.imgmoneda}\n          source={require(\"./img/billeteras/solana.png\")}\n        />\n      );\n    } else if (titleMoneda == \"Tether\") {\n      return (\n        <Image\n          style={styles.imgmoneda}\n          source={require(\"./img/billeteras/tether.png\")}\n        />\n      );\n    }\n  };\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getString();\n    setCopiedText(text);\n  };\n\n  return (\n    <KeyboardAwareScrollView style={styles.body}>\n      <StatusBar backgroundColor=\"#FBF7FF\" barStyle={\"dark-content\"} />\n      <View style={styles.completo}>\n        <View style={styles.titlecc}>\n          <Text style={styles.titletx}>Enviar {titleMoneda}</Text>\n        </View>\n        <View style={styles.logorb}>{imag()}</View>\n        <View style={styles.cajaatras}>\n          <TouchableOpacity\n            activeOpacity={0.5}\n            style={styles.btndo}\n            onPress={() => navigation.goBack()}\n          >\n            <Icon name=\"arrow-left\" size={altura} color=\"#440577\" />\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.textInput}>\n          <Text style={styles.icnt}>Cantidad</Text>\n          {/* <AutoSizeText\n            numberOfLines={1}\n            mode={ResizeTextMode.group}\n            style={styles.txtAjust}\n          >\n            <Text style={styles.cntdRecibe}>{pinN}</Text>\n          </AutoSizeText> */}\n          <View style={styles.txtAjustables}>\n            <TextInput\n              style={styles.cantidadRecibe}\n              editable={false}\n              placeholder=\"0\"\n            >\n              {pinN}\n            </TextInput>\n          </View>\n        </View>\n        <View style={styles.contCndr}>\n          <Text style={styles.cndrR}>{abrev}</Text>\n          <Text style={styles.valorR}>$ 0.00</Text>\n        </View>\n        <View style={styles.pegarDireccion}>\n          <View style={{ width: \"55%\" }}>\n            <TextInput style={styles.pegaDir} onChangeText={val => setToPublic(val)} placeholder=\"Pegar dirección\">\n              {copiedText}\n            </TextInput>\n          </View>\n          <View style={styles.iconos}>\n            <TouchableOpacity onPress={() => fetchCopiedText()}>\n              <Image\n                style={styles.clipboard}\n                source={require(\"./img/Paste-clipboard.png\")}\n              ></Image>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => navigation.navigate(\"QrReader\")}>\n              <Image\n                style={styles.qr}\n                source={require(\"./img/qr-enviar.png\")}\n              ></Image>\n            </TouchableOpacity>\n          </View>\n        </View>\n        {titleMoneda == \"Solana\" && (\n        <View style={styles.btnEnviar}>\n          <TouchableOpacity \n            style={styles.btnCont}\n            onPress={() => [enviarSoles(), navigation.navigate('Balance')]}\n          >\n            <Text style={styles.txtEnviar}>Enviar</Text>\n          </TouchableOpacity>\n        </View>\n        )}\n        {titleMoneda != \"Solana\" &&(\n          <View style={styles.btnEnviar}>\n          <TouchableOpacity \n            style={styles.btnCont}\n            onPress={() => [enviarSPL(), navigation.navigate('Balance')]}\n          >\n            <Text style={styles.txtEnviar}>Enviar</Text>\n          </TouchableOpacity>\n        </View>\n        )}\n      </View>\n    </KeyboardAwareScrollView>\n  );\n};\n\nexport default EnviarDireccion;\n"]},"metadata":{},"sourceType":"module"}