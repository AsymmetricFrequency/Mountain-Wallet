{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { ScrollView, TextInput } from \"react-native-gesture-handler\";\nimport * as Animatable from \"react-native-animatable\";\nimport { readMnemonic } from \"../../api\";\nimport { Lotierror, Lotiexito } from \"./component/lottie\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"@expo/vector-icons/Feather\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nvar elements = [];\nvar doceIncompleta = [];\nvar arr = [];\nvar altura = Platform.OS === \"ios\" ? 22 : 25;\n\nfunction leerMnemonic() {\n  var mnemonic = readMnemonic();\n  mnemonic.then(function (value) {\n    var docePalabras = value;\n    var words = docePalabras.split(\" \");\n\n    for (var index = 0; index < 12; index++) {\n      elements.push(words[index]);\n      doceIncompleta.push(words[index]);\n    }\n  });\n  setTimeout(function () {\n    while (arr.length < 3) {\n      var r = Math.floor(Math.random() * 11) + 1;\n\n      if (arr.indexOf(r) === -1) {\n        arr.push(r);\n        doceIncompleta[r] = \"\";\n      }\n    }\n  }, 1);\n}\n\nvar DocePalabras = function DocePalabras(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  useEffect(function () {\n    setRefreshing(true);\n\n    if (elements.length === 0) {\n      leerMnemonic();\n    } else {\n      console.log('lleno');\n    }\n\n    setTimeout(function () {\n      setRefreshing(false);\n    }, 5);\n  }, []);\n  console.log(elements);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      anmt = _useState2[0],\n      setanmt = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      MostrarModal = _useState4[0],\n      setModal = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      MostrarError = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(React.createElement(Lotierror, null)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lottie = _useState8[0],\n      setLottie = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mostrartitulo = _useState10[0],\n      setmostrartitulo = _useState10[1];\n\n  var _useState11 = useState({\n    \"vacio[1]\": \"\"\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      values = _useState12[0],\n      setValues = _useState12[1];\n\n  function handleChange(text, eventName) {\n    setValues(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, eventName, text));\n    });\n  }\n\n  function addTresFaltantes() {\n    for (var index = 0; index < doceIncompleta.length; index++) {\n      if (doceIncompleta[index] === \"\") {\n        doceIncompleta[index] = values[\"vacio[\" + index + \"]\"];\n      }\n    }\n\n    var arreglo1 = elements.toString();\n    var arreglo2 = doceIncompleta.toString();\n\n    if (arreglo1 === arreglo2) {\n      setanmt(\"fadeInDownBig\");\n      setmostrartitulo(\"Correcto\");\n      setError(\"Palabras correctas\");\n      setModal(true);\n      setLottie(React.createElement(Lotiexito, null));\n      setTimeout(function () {\n        setanmt(\"fadeOutUp\");\n        setTimeout(function () {\n          setModal(false);\n        }, 100);\n        navigation.navigate(\"ContraseÃ±a\");\n      }, 1000);\n    } else {\n      setanmt(\"fadeInDownBig\");\n      setmostrartitulo(\"Incorrecto\");\n      setError(\"Palabras incorrectas\");\n      setModal(true);\n      setLottie(React.createElement(Lotierror, null));\n      setTimeout(function () {\n        setanmt(\"fadeOutUp\");\n        setTimeout(function () {\n          setModal(false);\n        }, 100);\n      }, 1000);\n\n      for (var i = 0; i < doceIncompleta.length; i++) {\n        for (var j = 0; j < arr.length; j++) {\n          if (i == arr[j]) {\n            doceIncompleta[i] = \"\";\n          }\n        }\n      }\n    }\n  }\n\n  return React.createElement(KeyboardAwareScrollView, {\n    style: styles.body\n  }, React.createElement(ScrollView, {\n    style: {\n      backgroundColor: \"red\"\n    },\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      tintColor: \"#5b298a\",\n      colors: [\"#5b298a\", \"#7e54a7\"]\n    })\n  }), React.createElement(Modal, {\n    visible: MostrarModal,\n    transparent: true,\n    onRequestClose: function onRequestClose() {\n      return setModal(false);\n    },\n    hardwareAccelerated: true\n  }, React.createElement(Animatable.View, {\n    animation: anmt,\n    duration: 600\n  }, React.createElement(View, {\n    style: styles.bodymodal\n  }, React.createElement(View, {\n    style: styles.ventanamodal\n  }, React.createElement(View, {\n    style: styles.icontext\n  }, React.createElement(View, {\n    style: styles.contenedorlottie\n  }, lottie)), React.createElement(View, {\n    style: styles.textnoti\n  }, React.createElement(View, {\n    style: styles.contenedortext\n  }, React.createElement(Text, {\n    style: styles.texticon\n  }, mostrartitulo)), React.createElement(View, null, React.createElement(Text, {\n    style: styles.notificacion\n  }, MostrarError))))))), React.createElement(View, {\n    style: styles.completo\n  }, React.createElement(View, {\n    style: styles.cajaatras\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: styles.btndo,\n    onPress: function onPress() {\n      return navigation.goBack();\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-left\",\n    size: altura,\n    color: \"#440577\"\n  }))), React.createElement(View, {\n    style: styles.headerDos\n  }, React.createElement(Text, {\n    style: styles.headerTitle\n  }, \"Escribe las tres palabras \", \"\\n\", \"faltantes en tu frase de \", \"\\n\", \"respaldo.\")), React.createElement(View, {\n    style: styles.headerPrimario\n  }, doceIncompleta.map(function (j, index) {\n    if (doceIncompleta[index] === \"\") {\n      return React.createElement(TextInput, {\n        key: index,\n        autoCapitalize: \"none\",\n        style: styles.fondoFrases,\n        onChangeText: function onChangeText(text) {\n          return handleChange(text, \"vacio[\" + index + \"]\");\n        }\n      }, React.createElement(Text, {\n        style: styles.txtDoceIncompleta\n      }, doceIncompleta[index]));\n    } else {\n      return React.createElement(TextInput, {\n        key: index,\n        style: styles.fondoFrases,\n        editable: false\n      }, React.createElement(Text, {\n        style: styles.txtDoceIncompleta\n      }, doceIncompleta[index]));\n    }\n  })), React.createElement(View, null, React.createElement(TouchableOpacity, {\n    style: styles.btnContinuar,\n    onPress: function onPress() {\n      return addTresFaltantes();\n    }\n  }, React.createElement(Text, {\n    style: styles.txtContinuar\n  }, \"Continuar\")))));\n};\n\nvar cuadroios = Platform.OS === \"ios\" ? 55 : 45;\nvar alturaios = Platform.OS === \"ios\" ? \"11%\" : \"2%\";\nexport default DocePalabras;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/DocePalabras.tsx"],"names":["React","useState","useEffect","ScrollView","TextInput","Animatable","readMnemonic","Lotierror","Lotiexito","styles","Icon","KeyboardAwareScrollView","elements","doceIncompleta","arr","altura","Platform","OS","leerMnemonic","mnemonic","then","value","docePalabras","words","split","index","push","setTimeout","length","r","Math","floor","random","indexOf","DocePalabras","navigation","refreshing","setRefreshing","console","log","anmt","setanmt","MostrarModal","setModal","MostrarError","setError","lottie","setLottie","mostrartitulo","setmostrartitulo","values","setValues","handleChange","text","eventName","prev","addTresFaltantes","arreglo1","toString","arreglo2","navigate","i","j","body","backgroundColor","bodymodal","ventanamodal","icontext","contenedorlottie","textnoti","contenedortext","texticon","notificacion","completo","cajaatras","btndo","goBack","headerDos","headerTitle","headerPrimario","map","fondoFrases","txtDoceIncompleta","btnContinuar","txtContinuar","cuadroios","alturaios"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  Platform,\n  Modal,\n  RefreshControl\n} from \"react-native\";\nimport { ScrollView, TextInput } from \"react-native-gesture-handler\";\nimport * as Animatable from \"react-native-animatable\";\nimport { readMnemonic } from \"../../api\";\nimport { Lotierror, Lotiexito } from \"./component/lottie\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"react-native-vector-icons/Feather\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\n\nconst elements: string[] = [];\nconst doceIncompleta: string[] = [];\nconst arr: number[] = [];\n\nconst altura = Platform.OS === \"ios\" ? 22 : 25;\n\nfunction leerMnemonic() {\n  const mnemonic = readMnemonic();\n\n  mnemonic.then((value) => {\n    const docePalabras = value;\n    const words = docePalabras.split(\" \");\n    for (let index = 0; index < 12; index++) {\n      elements.push(words[index]);\n      doceIncompleta.push(words[index]);\n    }\n  });\n  //recorre las tres palabras restantes\n  setTimeout(() => {\n    while (arr.length < 3) {\n      var r = Math.floor(Math.random() * 11) + 1;\n      if (arr.indexOf(r) === -1) {\n        arr.push(r);\n        doceIncompleta[r] = \"\";\n      }\n    }\n  }, 1);\n}\n\nconst DocePalabras = ({ navigation }: { navigation: any }) => {\n  \n  const [refreshing, setRefreshing] = React.useState(false);\n\n  useEffect(() => {\n    setRefreshing(true);\n    \n    if (elements.length === 0){\n      leerMnemonic();\n      \n    }else{\n      console.log('lleno');\n    }\n    setTimeout(() => {\n      setRefreshing(false);\n    }, 5);\n  }, []);\n\n  console.log(elements);\n\n  //Modal\n  const [anmt, setanmt] = useState(\"\");\n  const [MostrarModal, setModal] = useState(false);\n  const [MostrarError, setError] = useState(\"\");\n  const [lottie, setLottie] = useState(<Lotierror />);\n  const [mostrartitulo, setmostrartitulo] = useState(\"\");\n\n  //casillas faltantes\n  const [values, setValues] = useState({\n    \"vacio[1]\": \"\",\n  });\n  //Esta funcion actualiza y toma lo que esta en la caja de texto\n  function handleChange(text: string, eventName: string) {\n    setValues((prev) => {\n      return {\n        ...prev,\n        [eventName]: text,\n      };\n    });\n  }\n  // funcion para aÃ±adir las tres palabras restantes al arreglo y comparar que las 3 palabras faltantes sean las correctas\n  //con respecto al arreglo original\n  function addTresFaltantes() {\n    for (let index = 0; index < doceIncompleta.length; index++) {\n      if (doceIncompleta[index] === \"\") {\n        doceIncompleta[index] = values[\"vacio[\" + index + \"]\"];\n      }\n    }\n    let arreglo1 = elements.toString();\n    let arreglo2 = doceIncompleta.toString();\n\n    if (arreglo1 === arreglo2) {\n      setanmt(\"fadeInDownBig\");\n      setmostrartitulo(\"Correcto\");\n      setError(\"Palabras correctas\");\n      setModal(true);\n      setLottie(<Lotiexito />);\n      setTimeout(() => {\n        setanmt(\"fadeOutUp\");\n        setTimeout(() => {\n          setModal(false);\n        }, 100);\n        navigation.navigate(\"ContraseÃ±a\");\n      }, 1000);\n    } else {\n      //alert(\"Frases incorrectas\");\n      setanmt(\"fadeInDownBig\");\n      setmostrartitulo(\"Incorrecto\");\n      setError(\"Palabras incorrectas\");\n      setModal(true);\n      setLottie(<Lotierror />);\n      setTimeout(() => {\n        setanmt(\"fadeOutUp\");\n        setTimeout(() => {\n          setModal(false);\n        }, 100);\n      }, 1000);\n      for (let i = 0; i < doceIncompleta.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n          if (i == arr[j]) {\n            doceIncompleta[i] = \"\";\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <KeyboardAwareScrollView style={styles.body}>\n      <ScrollView\n        style={{ backgroundColor: \"red\" }}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            tintColor=\"#5b298a\"\n            colors={[\"#5b298a\", \"#7e54a7\"]}\n          />\n        }\n      ></ScrollView>\n      <Modal\n        visible={MostrarModal}\n        transparent\n        onRequestClose={() => setModal(false)}\n        hardwareAccelerated\n      >\n        <Animatable.View animation={anmt} duration={600}>\n          <View style={styles.bodymodal}>\n            <View style={styles.ventanamodal}>\n              <View style={styles.icontext}>\n                <View style={styles.contenedorlottie}>{lottie}</View>\n              </View>\n              <View style={styles.textnoti}>\n                <View style={styles.contenedortext}>\n                  <Text style={styles.texticon}>{mostrartitulo}</Text>\n                </View>\n                <View>\n                  <Text style={styles.notificacion}>{MostrarError}</Text>\n                </View>\n              </View>\n            </View>\n          </View>\n        </Animatable.View>\n      </Modal>\n      <View style={styles.completo}>\n        <View style={styles.cajaatras}>\n          <TouchableOpacity\n            activeOpacity={0.5}\n            style={styles.btndo}\n            onPress={() => navigation.goBack()}\n          >\n            <Icon name=\"arrow-left\" size={altura} color=\"#440577\" />\n          </TouchableOpacity>\n        </View>\n        <View style={styles.headerDos}>\n          <Text style={styles.headerTitle}>\n            Escribe las tres palabras {\"\\n\"}faltantes en tu frase de {\"\\n\"}\n            respaldo.\n          </Text>\n        </View>\n        <View style={styles.headerPrimario}>\n          {doceIncompleta.map((j, index) => {\n            if (doceIncompleta[index] === \"\") {\n              return (\n                <TextInput\n                  key={index}\n                  autoCapitalize=\"none\"\n                  style={styles.fondoFrases}\n                  onChangeText={(text) =>\n                    handleChange(text, \"vacio[\" + index + \"]\")\n                  }\n                >\n                  <Text style={styles.txtDoceIncompleta}>\n                    {doceIncompleta[index]}\n                  </Text>\n                </TextInput>\n              );\n            } else {\n              return (\n                <TextInput key={index} style={styles.fondoFrases} editable={false}>\n                  <Text style={styles.txtDoceIncompleta}>\n                    {doceIncompleta[index]}\n                  </Text>\n                </TextInput>\n              );\n            }\n          })}\n        </View>\n        <View>\n          <TouchableOpacity\n            style={styles.btnContinuar}\n            onPress={() => addTresFaltantes()}\n          >\n            <Text style={styles.txtContinuar}>Continuar</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </KeyboardAwareScrollView>\n  );\n};\n\nconst cuadroios = Platform.OS === \"ios\" ? 55 : 45;\nconst alturaios = Platform.OS === \"ios\" ? \"11%\" : \"2%\";\n\nexport default DocePalabras;\n"]},"metadata":{},"sourceType":"module"}