{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport \"react-native-url-polyfill/auto\";\nimport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken, sendTokenTransaction, getHistory } from \"./api\";\n;\nimport Importar from \"./src/screens/Importar\";\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mnemonic = _useState2[0],\n      setMnemonic = _useState2[1];\n\n  function generarMnemonic() {\n    var memo = generateMnemonic();\n    memo.then(function (value) {\n      console.log(value);\n      setMnemonic(value);\n    });\n  }\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seed = _useState4[0],\n      setSeed = _useState4[1];\n\n  function generarSeed(mnemonic) {\n    mnemonicToSeed(mnemonic).then(function (value) {\n      setSeed(value);\n    });\n  }\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      publicKey = _useState6[0],\n      setPublicKey = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      account = _useState8[0],\n      setAccount = _useState8[1];\n\n  function generarCuenta(seed) {\n    createAccount(seed).then(function (hexValue) {\n      console.log(hexValue.publicKey.toString());\n      setPublicKey(hexValue.publicKey.toString());\n      console.log(hexValue);\n      setAccount(hexValue);\n    });\n  }\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      balance = _useState10[0],\n      setBalance = _useState10[1];\n\n  function obtenerBalance(publicKey) {\n    return _regeneratorRuntime.async(function obtenerBalance$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            getBalance(publicKey).then(function (value) {\n              console.log(value);\n              setBalance(value);\n            }).catch(function (error) {\n              console.log(error);\n              return \"error\";\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      tokenBalance = _useState12[0],\n      setTokenBalance = _useState12[1];\n\n  function obtenerTokenB(publicKey, mint) {\n    var bala;\n    return _regeneratorRuntime.async(function obtenerTokenB$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            bala = getToken(publicKey, mint).then(function (value) {\n              setTokenBalance(value);\n              console.log(value);\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendToken() {\n    var send;\n    return _regeneratorRuntime.async(function sendToken$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            send = sendTokenTransaction(account, \"uja3w9XG1g6DQSVT6YASK99FVmdVwXoHVoQEgtEJdLv\", \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\", 1);\n            send.then(function (value) {\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      his = _useState14[0],\n      setHis = _useState14[1];\n\n  function historial(pubKey) {\n    var send;\n    return _regeneratorRuntime.async(function historial$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            send = getHistory(pubKey);\n            send.then(function (value) {\n              setHis(value[0].signature.toString());\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(Importar, null);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 30\n  },\n  boton: {\n    marginTop: 50\n  }\n});","map":{"version":3,"sources":["C:/Users/USER/Desktop/Proyectos/WalletRN/backup/Mountain-Walletdos/App.tsx"],"names":["React","useState","generateMnemonic","mnemonicToSeed","createAccount","getBalance","getToken","sendTokenTransaction","getHistory","Importar","App","mnemonic","setMnemonic","generarMnemonic","memo","then","value","console","log","seed","setSeed","generarSeed","publicKey","setPublicKey","account","setAccount","generarCuenta","hexValue","toString","balance","setBalance","obtenerBalance","catch","error","tokenBalance","setTokenBalance","obtenerTokenB","mint","bala","sendToken","send","his","setHis","historial","pubKey","signature","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","margin","boton","marginTop"],"mappings":"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","sourcesContent":["import { Keypair } from '@solana/web3.js';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport React, { useState } from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';\r\nimport \"react-native-url-polyfill/auto\";\r\n\r\n\r\nimport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken,sendTokenTransaction,saveKey, readKey,getHistory } from './api';\r\n\r\n;\r\n\r\n//screens\r\nimport Balance from './src/screens/Balance';\r\nimport Crearcuenta from './src/screens/Crearcuenta';\r\nimport Home from './src/screens/Home';\r\nimport ImportarCuenta from './src/screens/Importarcuenta';\r\nimport Importar from './src/screens/Importar';\r\nimport CodigoVerificacion from './src/screens/CodigoVerificacion'\r\nimport Recibir from './src/screens/Recibir';\r\nimport Splashc from './src/screens/Splashc';\r\n\r\n  \r\n\r\nexport default function App() { \r\n\r\n  //Funcion de generar 12 palabras\r\n  const [mnemonic, setMnemonic] = useState(\"\")\r\n\r\n  function generarMnemonic(){\r\n    const memo = generateMnemonic()\r\n    memo.then((value) => {\r\n      console.log(value)\r\n      setMnemonic(value)\r\n    })\r\n  }\r\n\r\n  //Funcion semilla desde 12 palabras\r\n  const [seed, setSeed] = useState(\"\")\r\n\r\n\r\n  function generarSeed(mnemonic: string) {\r\n    mnemonicToSeed(mnemonic).then((value) => {\r\n      //guardar llave\r\n      setSeed(value)\r\n    })\r\n  }\r\n\r\n  //Funcion para crear cuenta\r\n  const [publicKey, setPublicKey] = useState(\"\")\r\n  const [account, setAccount] = useState()\r\n\r\n  function generarCuenta(seed) {\r\n    createAccount(seed).then((hexValue) => {\r\n      console.log(hexValue.publicKey.toString())\r\n      setPublicKey(hexValue.publicKey.toString())\r\n      console.log(hexValue)\r\n      setAccount(hexValue)\r\n    })\r\n  }\r\n  \r\n  \r\n  //Funcion obtener balance\r\n  const [balance, setBalance] = useState(0)\r\n\r\n  async function obtenerBalance(publicKey: string) {\r\n    getBalance(publicKey).then((value) => {\r\n      console.log(value)\r\n      setBalance(value)\r\n    }).catch((error) => {\r\n      console.log(error);\r\n      return \"error\"\r\n    })\r\n  }\r\n\r\n  //Funcion de obtener splToken\r\n  const [tokenBalance, setTokenBalance] = useState(0)\r\n\r\n  async function obtenerTokenB(publicKey:string, mint:string) {\r\n    const bala = getToken(publicKey, mint).then((value) => {\r\n      setTokenBalance(value)\r\n      console.log(value);\r\n    })\r\n  }\r\n\r\n  //Funcion enviar token\r\n  async function sendToken(){\r\n    const send = sendTokenTransaction(account,\"uja3w9XG1g6DQSVT6YASK99FVmdVwXoHVoQEgtEJdLv\",\"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\",1)\r\n    send.then((value) => {\r\n      console.log(value);\r\n    })\r\n  } \r\n\r\n  //Funcion obtener historial\r\n  const [his,setHis] = useState(\"\")\r\n\r\n  async function historial(pubKey:string){\r\n    const send = getHistory(pubKey)\r\n    send.then((value) => {      \r\n      setHis(value[0].signature.toString())\r\n      console.log(value);\r\n    })\r\n  } \r\n\r\n  \r\n  return (\r\n    \r\n    <Importar/>\r\n    // <View style={styles.container}>\r\n    //   <Text>{mnemonic}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => generarMnemonic()}\r\n    //   >\r\n    //     <Text>Generar Mnemonic</Text>\r\n    //   </TouchableOpacity>\r\n    //   <Text>{seed}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => generarSeed(mnemonic)}\r\n    //   >\r\n    //     <Text>Generar Semilla</Text>\r\n    //   </TouchableOpacity>\r\n    //   <Text>{publicKey}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => generarCuenta(seed)}\r\n    //   >\r\n    //     <Text>Crear Cuenta</Text>\r\n    //   </TouchableOpacity>\r\n    //   <Text>{balance}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => obtenerBalance(publicKey)}\r\n    //   >\r\n    //     <Text>Obtener Balance</Text>\r\n    //   </TouchableOpacity>\r\n    //   <Text>{tokenBalance}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => obtenerTokenB(publicKey, \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\")}\r\n    //   >\r\n    //     <Text>Obtener Balance Token</Text>\r\n    //   </TouchableOpacity>\r\n    //   <Text>{his}</Text>\r\n    //   <TouchableOpacity\r\n    //     style={styles.boton}\r\n    //     onPress={() => historial(\"uja3w9XG1g6DQSVT6YASK99FVmdVwXoHVoQEgtEJdLv\")}\r\n    //   >\r\n    //     <Text>Enviar</Text>\r\n    //   </TouchableOpacity>\r\n    // </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    margin: 30\r\n  },\r\n  boton: {\r\n    marginTop: 50\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}