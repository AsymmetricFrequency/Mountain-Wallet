{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport React, { useState } from \"react\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport { styles } from \"../theme/appTheme\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { saveMmemonic } from \"../../api\";\nimport { useTheme } from \"react-native-paper\";\nvar altura = Platform.OS === \"ios\" ? 22 : 25;\n\nvar Restaurar = function Restaurar(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(Appearance.getColorScheme()),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  Appearance.addChangeListener(function (scheme) {\n    setTheme(scheme.colorScheme);\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useState3 = useState({\n    mnemonic: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      values = _useState4[0],\n      setValues = _useState4[1];\n\n  function handleChange(text, eventName) {\n    setValues(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, eventName, text));\n    });\n  }\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      anmt = _useState6[0],\n      setanmt = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      vacioModal = _useState8[0],\n      setVacioModal = _useState8[1];\n\n  function continuar() {\n    if (values.mnemonic != \"\") {\n      saveMmemonic(values.mnemonic);\n      navigation.navigate(\"ContraseÃ±a\");\n    } else {\n      setVacioModal(true);\n      setanmt(\"fadeInDownBig\");\n      setTimeout(function () {\n        setanmt(\"fadeOutUp\");\n        setTimeout(function () {\n          setVacioModal(false);\n        }, 100);\n      }, 2000);\n    }\n  }\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      copiedText = _useState10[0],\n      setCopiedText = _useState10[1];\n\n  var fetchCopiedText = function fetchCopiedText() {\n    var text;\n    return _regeneratorRuntime.async(function fetchCopiedText$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Clipboard.getString());\n\n          case 2:\n            text = _context.sent;\n            setCopiedText(text);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    resetScrollToCoords: {\n      x: 0,\n      y: 0\n    },\n    contentContainerStyle: [styles.body, {\n      backgroundColor: colors.background\n    }],\n    scrollEnabled: false\n  }, React.createElement(StatusBar, {\n    backgroundColor: colors.background,\n    barStyle: theme === \"dark\" ? \"light-content\" : \"dark-content\"\n  }), React.createElement(View, {\n    style: styles.completo\n  }, React.createElement(View, {\n    style: styles.cajaatras\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: styles.btndo,\n    onPress: function onPress() {\n      return navigation.goBack();\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-left\",\n    size: altura,\n    color: \"#440577\"\n  }))), React.createElement(View, {\n    style: styles.contenedorCajaRest\n  }, React.createElement(View, {\n    style: styles.cajaFrase\n  }, React.createElement(TextInput, {\n    style: styles.txtInputRest,\n    multiline: true,\n    autoCapitalize: \"none\",\n    placeholder: \"Por favor ingresa tu frase de respaldo.\",\n    placeholderTextColor: \"#AEA3C6\",\n    onChangeText: function onChangeText(text) {\n      return handleChange(text, \"mnemonic\");\n    }\n  }, copiedText)), React.createElement(View, {\n    style: styles.btnCopiar\n  }, React.createElement(TouchableOpacity, {\n    style: styles.cntdClipboard,\n    onPress: function onPress() {\n      return fetchCopiedText();\n    }\n  }, React.createElement(Image, {\n    style: styles.clipboardRes,\n    source: require(\"./img/Paste-clipboard.png\")\n  })))), React.createElement(View, {\n    style: styles.cntdrNameBll\n  }, React.createElement(TextInput, {\n    style: styles.txtNombreBll,\n    placeholder: \"Nombre de la billetera\",\n    placeholderTextColor: \"#AEA3C6\"\n  })), React.createElement(View, {\n    style: styles.escudo\n  }, React.createElement(Image, {\n    style: styles.imgRestau,\n    source: require(\"./img/opacity-rerstaurar-mnemonic.png\")\n  })), React.createElement(View, {\n    style: styles.cajabtnRest\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.btnDone, {\n      backgroundColor: colors.text\n    }],\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return continuar();\n    }\n  }, React.createElement(Text, {\n    style: [styles.txtDone, {\n      color: colors.background\n    }]\n  }, \"Continuar\")))));\n};\n\nexport default Restaurar;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/Restaurar.tsx"],"names":["React","useState","KeyboardAwareScrollView","Icon","styles","TextInput","saveMmemonic","useTheme","altura","Platform","OS","Restaurar","navigation","Appearance","getColorScheme","theme","setTheme","addChangeListener","scheme","colorScheme","colors","mnemonic","values","setValues","handleChange","text","eventName","prev","anmt","setanmt","vacioModal","setVacioModal","continuar","navigate","setTimeout","copiedText","setCopiedText","fetchCopiedText","Clipboard","getString","x","y","body","backgroundColor","background","completo","cajaatras","btndo","goBack","contenedorCajaRest","cajaFrase","txtInputRest","btnCopiar","cntdClipboard","clipboardRes","require","cntdrNameBll","txtNombreBll","escudo","imgRestau","cajabtnRest","btnDone","txtDone","color"],"mappings":"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","sourcesContent":["import {\n  Clipboard,\n  Image,\n  View,\n  Text,\n  StatusBar,\n  TouchableOpacity,\n  Platform,\n  Appearance,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\nimport { styles } from \"../theme/appTheme\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { saveMmemonic } from \"../../api\";\nimport { useTheme } from \"react-native-paper\";\n\n\nconst altura = Platform.OS === \"ios\" ? 22 : 25;\n//\nconst Restaurar = ({ navigation }: { navigation: any }) => {\n  //Detecta el modo del sistema\n  const [theme, setTheme] = useState(Appearance.getColorScheme());\n  Appearance.addChangeListener((scheme) => {\n    setTheme(scheme.colorScheme);\n  });\n  const { colors } = useTheme();\n\n  const [values, setValues] = useState({\n    mnemonic: \"\",\n  });\n\n  //Esta funcion actualiza y toma lo que esta en la caja de texto\n  function handleChange(text, eventName) {\n    setValues((prev) => {\n      return {\n        ...prev,\n        [eventName]: text,\n      };\n    });\n  }\n\n\n  const [anmt, setanmt] = useState(\"\");\n  const [vacioModal, setVacioModal] = useState(false);\n\n  function continuar() {\n    if (values.mnemonic != \"\") {\n      saveMmemonic(values.mnemonic);\n      navigation.navigate(\"ContraseÃ±a\");\n    } else {\n      setVacioModal(true);\n      setanmt(\"fadeInDownBig\");\n      setTimeout(() => {\n        setanmt(\"fadeOutUp\");\n        setTimeout(() => {\n          setVacioModal(false);\n        }, 100);\n      }, 2000);\n    }\n  }\n  const [copiedText, setCopiedText] = useState(\"\");\n\n  const fetchCopiedText = async () => {\n    const text = await Clipboard.getString();\n    setCopiedText(text);\n  };\n\n  return (\n    <KeyboardAwareScrollView\n      resetScrollToCoords={{ x: 0, y: 0 }}\n      contentContainerStyle={[\n        styles.body,\n        { backgroundColor: colors.background },\n      ]}\n      scrollEnabled={false}\n    >\n      <StatusBar\n        backgroundColor={colors.background}\n        barStyle={theme === \"dark\" ? \"light-content\" : \"dark-content\"}\n      />\n      <View style={styles.completo}>\n        <View style={styles.cajaatras}>\n          <TouchableOpacity\n            activeOpacity={0.5}\n            style={styles.btndo}\n            onPress={() => navigation.goBack()}\n          >\n            <Icon name=\"arrow-left\" size={altura} color=\"#440577\" />\n          </TouchableOpacity>\n        </View>\n        <View style={styles.contenedorCajaRest}>\n          <View style={styles.cajaFrase}>\n            <TextInput\n              style={styles.txtInputRest}\n              multiline={true}\n              autoCapitalize=\"none\"\n              placeholder={\"Por favor ingresa tu frase de respaldo.\"}\n              placeholderTextColor=\"#AEA3C6\"\n              onChangeText={(text) => handleChange(text, \"mnemonic\")}\n            >\n              {copiedText}\n            </TextInput>\n          </View>\n          <View style={styles.btnCopiar}>\n            <TouchableOpacity\n              style={styles.cntdClipboard}\n              onPress={() => fetchCopiedText()}\n            >\n              <Image\n                style={styles.clipboardRes}\n                source={require(\"./img/Paste-clipboard.png\")}\n              ></Image>\n            </TouchableOpacity>\n          </View>\n        </View>\n        <View style={styles.cntdrNameBll}>\n          <TextInput\n            style={styles.txtNombreBll}\n            placeholder={\"Nombre de la billetera\"}\n            placeholderTextColor=\"#AEA3C6\"\n          ></TextInput>\n        </View>\n        <View style={styles.escudo}>\n          <Image\n            style={styles.imgRestau}\n            source={require(\"./img/opacity-rerstaurar-mnemonic.png\")}\n          ></Image>\n        </View>\n        <View style={styles.cajabtnRest}>\n          <TouchableOpacity\n            style={[styles.btnDone, { backgroundColor: colors.text }]}\n            activeOpacity={0.5}\n            onPress={() => continuar()}\n          >\n            <Text style={[styles.txtDone, { color: colors.background }]}>\n              Continuar\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </KeyboardAwareScrollView>\n  );\n};\n\nexport default Restaurar;\n"]},"metadata":{},"sourceType":"module"}