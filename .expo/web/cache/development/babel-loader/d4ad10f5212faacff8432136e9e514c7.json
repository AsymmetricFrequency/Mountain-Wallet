{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { useTheme } from \"react-native-paper\";\nimport { generateMnemonic } from \"../../api\";\nimport { styles } from \"../theme/appTheme\";\n\nvar Home = function Home(_ref) {\n  var navigation = _ref.navigation;\n\n  function crearMnemonic() {\n    var memo = generateMnemonic();\n    memo.then(function (value) {\n      console.log(value);\n      setTimeout(function () {\n        navigation.navigate(\"Slider\");\n      }, 1000);\n    });\n  }\n\n  var _useState = useState(Appearance.getColorScheme()),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  Appearance.addChangeListener(function (scheme) {\n    setTheme(scheme.colorScheme);\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  useEffect(function () {\n    var backHandler = BackHandler.addEventListener(\"hardwareBackPress\", function () {\n      return true;\n    });\n    return function () {\n      return backHandler.remove();\n    };\n  }, []);\n  return React.createElement(SafeAreaView, {\n    style: [styles.body, {\n      backgroundColor: colors.background\n    }]\n  }, React.createElement(StatusBar, {\n    backgroundColor: colors.background,\n    barStyle: theme === \"dark\" ? \"light-content\" : \"dark-content\"\n  }), React.createElement(View, {\n    style: [styles.completo, {\n      backgroundColor: colors.background\n    }]\n  }, React.createElement(Image, {\n    style: styles.logocolor,\n    source: theme === \"light\" ? require(\"./img/logocolor.png\") : require(\"./img/logocolorDark.png\")\n  }), React.createElement(View, {\n    style: styles.btncr\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.btnc, {\n      backgroundColor: colors.text\n    }],\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return crearMnemonic();\n    }\n  }, React.createElement(Text, {\n    style: [styles.txtc, {\n      color: colors.background\n    }]\n  }, \"CREAR NUEVA CARTERA\")), React.createElement(TouchableOpacity, {\n    style: [styles.btnr, {\n      backgroundColor: colors.text\n    }],\n    activeOpacity: 0.5,\n    onPress: function onPress() {\n      return navigation.navigate(\"Restaurar\");\n    }\n  }, React.createElement(Text, {\n    style: [styles.txtr, {\n      color: colors.background\n    }]\n  }, \"RESTAURAR CARTERA\"))), React.createElement(View, {\n    style: styles.cajadevep\n  }, React.createElement(Text, {\n    style: styles.txtdevep\n  }, \"DEVELOPED BY CONDOR LAB\"))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/Home.tsx"],"names":["React","useEffect","useState","useTheme","generateMnemonic","styles","Home","navigation","crearMnemonic","memo","then","value","console","log","setTimeout","navigate","Appearance","getColorScheme","theme","setTheme","addChangeListener","scheme","colorScheme","colors","backHandler","BackHandler","addEventListener","remove","body","backgroundColor","background","completo","logocolor","require","btncr","btnc","text","txtc","color","btnr","txtr","cajadevep","txtdevep"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Image,\r\n  BackHandler,\r\n  StatusBar,\r\n  SafeAreaView,\r\n  Appearance,\r\n} from \"react-native\";\r\nimport { useTheme } from \"react-native-paper\";\r\nimport { generateMnemonic } from \"../../api\";\r\n\r\nimport { styles } from \"../theme/appTheme\";\r\n\r\nconst Home = ({ navigation }: { navigation: any }) => {\r\n\r\n  function crearMnemonic() {\r\n    const memo = generateMnemonic();\r\n    memo.then((value) => {\r\n      console.log(value);\r\n      setTimeout(() => {\r\n        navigation.navigate(\"Slider\");\r\n      }, 1000);\r\n    });\r\n  }\r\n  //Detecta el modo del sistema\r\n  const [theme, setTheme] = useState(Appearance.getColorScheme());\r\n  Appearance.addChangeListener((scheme) => {\r\n    setTheme(scheme.colorScheme);\r\n  });\r\n  const { colors } = useTheme();\r\n\r\n  useEffect(() => {\r\n    const backHandler = BackHandler.addEventListener(\r\n      \"hardwareBackPress\",\r\n      () => true\r\n    );\r\n    return () => backHandler.remove();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <SafeAreaView style={[styles.body, { backgroundColor: colors.background }]}>\r\n      <StatusBar\r\n        backgroundColor={colors.background}\r\n        barStyle={theme === \"dark\" ? \"light-content\" : \"dark-content\"}\r\n      />\r\n      <View style={[styles.completo, { backgroundColor: colors.background }]}>\r\n        <Image\r\n          style={styles.logocolor}\r\n          source={\r\n            theme === \"light\"\r\n              ? require(\"./img/logocolor.png\")\r\n              : require(\"./img/logocolorDark.png\")\r\n          }\r\n        />\r\n        <View style={styles.btncr}>\r\n          <TouchableOpacity\r\n            style={[styles.btnc, { backgroundColor: colors.text }]}\r\n            activeOpacity={0.5}\r\n            onPress={() => crearMnemonic()}\r\n          >\r\n            <Text style={[styles.txtc, { color: colors.background }]}>\r\n              CREAR NUEVA CARTERA\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity\r\n            style={[styles.btnr, { backgroundColor: colors.text }]}\r\n            activeOpacity={0.5}\r\n            onPress={() => navigation.navigate(\"Restaurar\")}\r\n          >\r\n            <Text style={[styles.txtr, { color: colors.background }]}>\r\n              RESTAURAR CARTERA\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        <View style={styles.cajadevep}>\r\n          <Text style={styles.txtdevep}>DEVELOPED BY CONDOR LAB</Text>\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}