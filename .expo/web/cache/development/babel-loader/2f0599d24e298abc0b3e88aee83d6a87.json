{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport React, { useEffect, useState } from \"react\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport { readMnemonic } from \"../../api\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport LottieView from \"lottie-react-native\";\nvar altura = Platform.OS === \"ios\" ? 22 : 25;\nvar elements = [];\nvar doceIncompleta = [];\nvar arr = [];\n\nfunction leerMnemonic() {\n  var mnemonic = readMnemonic();\n  mnemonic.then(function (value) {\n    var docePalabras = value;\n    var words = docePalabras.split(\" \");\n\n    for (var index = 0; index < 12; index++) {\n      elements.push(words[index]);\n      doceIncompleta.push(words[index]);\n    }\n  });\n  setTimeout(function () {\n    while (arr.length < 3) {\n      var r = Math.floor(Math.random() * 11) + 1;\n\n      if (arr.indexOf(r) === -1) {\n        arr.push(r);\n        elements[r] = elements[r];\n      }\n    }\n  }, 1);\n}\n\nvar ExFrase = function ExFrase(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      animacion = _useState2[0],\n      setAnimacion = _useState2[1];\n\n  useEffect(function () {\n    setRefreshing(true);\n\n    if (elements.length === 0) {\n      leerMnemonic();\n    } else {\n      console.log('lleno');\n    }\n\n    setTimeout(function () {\n      setRefreshing(false);\n    }, 5);\n  }, []);\n  var frase = elements[0] + \" \" + elements[1] + \" \" + elements[2] + \" \" + elements[3] + \" \" + elements[4] + \" \" + elements[5] + \" \" + elements[6] + \" \" + elements[7] + \" \" + elements[8] + \" \" + elements[9] + \" \" + elements[10] + \" \" + elements[11];\n\n  var CopyToClipboard = function CopyToClipboard() {\n    return _regeneratorRuntime.async(function CopyToClipboard$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Clipboard.setString(frase);\n            setAnimacion(true);\n\n            if (Platform.OS === \"android\") {\n              ToastAndroid.show(\"Frase de respaldo copiada\", ToastAndroid.SHORT);\n            } else {\n              Alert.alert(\"Frase de respaldo copiada\");\n            }\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var animation = React.useRef(null);\n\n  var amj = function amj() {\n    var number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (Platform.OS === \"android\") {\n      number = 2000;\n    } else if (Platform.OS === \"ios\") {\n      number = 3000;\n    }\n\n    return number;\n  };\n\n  React.useEffect(function () {\n    if (animacion === true) {\n      animation.current.play(0, 50);\n      setTimeout(function () {\n        setAnimacion(false);\n      }, amj());\n    } else if (animacion === false) {\n      if (Platform.OS === \"android\") {\n        animation.current.play(18, 18);\n      } else if (Platform.OS === \"ios\") {\n        animation.current.play(18, 50);\n      }\n    }\n  }, [animacion]);\n  return React.createElement(KeyboardAwareScrollView, {\n    style: styles.body\n  }, React.createElement(ScrollView, {\n    style: {\n      backgroundColor: \"red\"\n    },\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      tintColor: \"#5b298a\",\n      colors: [\"#5b298a\", \"#7e54a7\"]\n    })\n  }), React.createElement(View, {\n    style: styles.completo\n  }, React.createElement(View, {\n    style: styles.cajaatras\n  }, React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: styles.btndo,\n    onPress: function onPress() {\n      return navigation.goBack();\n    }\n  }, React.createElement(Icon, {\n    name: \"arrow-left\",\n    size: altura,\n    color: \"#440577\"\n  }))), React.createElement(View, {\n    style: styles.titlecc\n  }, React.createElement(Text, {\n    style: styles.titlexx\n  }, \"Exportar frase de respaldo\")), React.createElement(View, {\n    style: styles.headerPrimario\n  }, elements.map(function (j, index) {\n    if (elements[index] === elements[index]) {\n      return React.createElement(TextInput, {\n        editable: false,\n        style: styles.fondoFrases\n      }, React.createElement(Text, {\n        style: styles.txtDoceIncompleta\n      }, elements[index]));\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return CopyToClipboard();\n    },\n    activeOpacity: 0.5\n  }, React.createElement(View, {\n    style: styles.tablaqr\n  }, React.createElement(View, {\n    style: styles.cbtncop\n  }, React.createElement(LottieView, {\n    ref: animation,\n    style: styles.lottiecopy,\n    source: require(\"../screens/Lottie/copy.json\"),\n    autoPlay: false,\n    loop: false\n  })), React.createElement(View, {\n    style: styles.cuadroqr\n  }, React.createElement(Text, {\n    numberOfLines: 3,\n    style: styles.txtqr\n  }, \"Copiar frase de respaldo\"))))));\n};\n\nexport default ExFrase;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/ExFrase.tsx"],"names":["React","useEffect","useState","styles","Icon","readMnemonic","KeyboardAwareScrollView","ScrollView","LottieView","altura","Platform","OS","elements","doceIncompleta","arr","leerMnemonic","mnemonic","then","value","docePalabras","words","split","index","push","setTimeout","length","r","Math","floor","random","indexOf","ExFrase","navigation","refreshing","setRefreshing","animacion","setAnimacion","console","log","frase","CopyToClipboard","Clipboard","setString","ToastAndroid","show","SHORT","Alert","alert","animation","useRef","amj","number","current","play","body","backgroundColor","completo","cajaatras","btndo","goBack","titlecc","titlexx","headerPrimario","map","j","fondoFrases","txtDoceIncompleta","tablaqr","cbtncop","lottiecopy","require","cuadroqr","txtqr"],"mappings":"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","sourcesContent":["import {\n  View,\n  Text,\n  TouchableOpacity,\n  Platform,\n  TextInput,\n  RefreshControl,\n  Clipboard,\n  ToastAndroid,\n  Alert,\n} from \"react-native\";\nimport React, { useEffect, useState } from \"react\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\nimport { readMnemonic } from \"../../api\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport LottieView from \"lottie-react-native\";\n\nimport { readPublicKey } from \"../../api\";\n\nconst altura = Platform.OS === \"ios\" ? 22 : 25;\n\nconst elements: string[] = [];\nconst doceIncompleta: string[] = [];\nconst arr: number[] = [];\n\nfunction leerMnemonic() {\n  const mnemonic = readMnemonic();\n\n  mnemonic.then((value) => {\n    const docePalabras = value;\n    const words = docePalabras.split(\" \");\n    for (let index = 0; index < 12; index++) {\n      elements.push(words[index]);\n      doceIncompleta.push(words[index]);\n    }\n  });\n  //recorre las tres palabras restantes\n  setTimeout(() => {\n    while (arr.length < 3) {\n      var r = Math.floor(Math.random() * 11) + 1;\n      if (arr.indexOf(r) === -1) {\n        arr.push(r);\n        elements[r] = elements[r];\n      }\n    }\n  }, 1);\n}\n\nconst ExFrase = ({ navigation }: { navigation: any }) => {\n\n\n  const [refreshing, setRefreshing] = React.useState(false);\n  const [animacion, setAnimacion] = useState(false);\n\n  useEffect(() => {\n    setRefreshing(true);\n    if (elements.length === 0){\n      leerMnemonic();\n    }else{\n      console.log('lleno');\n      \n    }\n    setTimeout(() => {\n      setRefreshing(false);\n    }, 5);\n  }, []);\n\n  const frase = `${elements[0]} ${elements[1]} ${elements[2]} ${elements[3]} ${elements[4]} ${elements[5]} ${elements[6]} ${elements[7]} ${elements[8]} ${elements[9]} ${elements[10]} ${elements[11]}`\n\n  const CopyToClipboard = async () => {\n    Clipboard.setString(frase);\n    setAnimacion(true);\n    if (Platform.OS === \"android\") {\n      ToastAndroid.show(\"Frase de respaldo copiada\", ToastAndroid.SHORT);\n    } else {\n      Alert.alert(\"Frase de respaldo copiada\");\n    }\n  };\n  //Animacion copiado\n  const animation = React.useRef(null);\n  const amj = (number = 0) => {\n    if (Platform.OS === \"android\") {\n      number = 2000;\n    } else if (Platform.OS === \"ios\") {\n      number = 3000;\n    }\n    return number;\n  };\n  React.useEffect(() => {\n    if (animacion === true) {\n      animation.current.play(0, 50);\n      setTimeout(() => {\n        setAnimacion(false);\n      }, amj());\n    } else if (animacion === false) {\n      if (Platform.OS === \"android\") {\n        animation.current.play(18, 18);\n      } else if (Platform.OS === \"ios\") {\n        animation.current.play(18, 50);\n      }\n    }\n  }, [animacion]);\n\n  return (\n    <KeyboardAwareScrollView style={styles.body}>\n      {/* <StatusBar\n          backgroundColor={colors.background}\n          barStyle={theme === \"dark\" ? \"light-content\" : \"dark-content\"}\n        /> */}\n      <ScrollView\n        style={{ backgroundColor: \"red\" }}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            tintColor=\"#5b298a\"\n            colors={[\"#5b298a\", \"#7e54a7\"]}\n          />\n        }\n      ></ScrollView>\n      <View style={styles.completo}>\n        <View style={styles.cajaatras}>\n          <TouchableOpacity\n            activeOpacity={0.5}\n            style={styles.btndo}\n            onPress={() => navigation.goBack()}\n          >\n            <Icon name=\"arrow-left\" size={altura} color=\"#440577\" />\n          </TouchableOpacity>\n        </View>\n        <View style={styles.titlecc}>\n          <Text style={styles.titlexx}>Exportar frase de respaldo</Text>\n        </View>\n        <View style={styles.headerPrimario}>\n          {elements.map((j, index) => {\n            if (elements[index] === elements[index]) {\n              return (\n                <TextInput editable={false} style={styles.fondoFrases}>\n                  <Text style={styles.txtDoceIncompleta}>\n                    {elements[index]}\n                  </Text>\n                </TextInput>\n              );\n            }\n          })}\n        </View>\n        <TouchableOpacity onPress={() => CopyToClipboard()} activeOpacity={0.5}>\n          <View style={styles.tablaqr}>\n            <View style={styles.cbtncop}>\n              <LottieView\n                ref={animation}\n                style={styles.lottiecopy}\n                source={require(\"../screens/Lottie/copy.json\")}\n                autoPlay={false}\n                loop={false}\n              />\n            </View>\n            <View style={styles.cuadroqr}>\n              <Text numberOfLines={3} style={styles.txtqr}>\n                Copiar frase de respaldo\n              </Text>\n\n              {/* <TextInput style={styles.inputqr} value={pKey} editable={false}/> */}\n            </View>\n          </View>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAwareScrollView>\n  );\n};\n\nexport default ExFrase;\n"]},"metadata":{},"sourceType":"module"}