{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { readMnemonic, createAccount, fetchSecret } from \"../../api\";\nimport { useTheme } from \"react-native-paper\";\nimport { styles } from \"../theme/appTheme\";\nimport { Lotiecarga, LotiecargaDark } from \"./component/lottie\";\n\nvar PantallaCarga = function PantallaCarga(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(Appearance.getColorScheme()),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  Appearance.addChangeListener(function (scheme) {\n    setTheme(scheme.colorScheme);\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      palabras = _useState4[0],\n      setPalabras = _useState4[1];\n\n  function leerMnemonic() {\n    var mnemonic;\n    return _regeneratorRuntime.async(function leerMnemonic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mnemonic = readMnemonic();\n            mnemonic.then(function (value) {\n              setPalabras(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  leerMnemonic();\n\n  function crearCuenta(mnemonic) {\n    var acc;\n    return _regeneratorRuntime.async(function crearCuenta$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            acc = createAccount(mnemonic);\n            fetchSecret(mnemonic);\n            acc.then(function (value) {\n              setTimeout(function () {\n                navigation.navigate(\"Barra\");\n              }, 2000);\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  setTimeout(function () {\n    crearCuenta(palabras);\n  }, 2000);\n  return React.createElement(SafeAreaView, {\n    style: [styles.body, {\n      backgroundColor: colors.background\n    }]\n  }, React.createElement(StatusBar, {\n    backgroundColor: colors.background,\n    barStyle: theme === \"dark\" ? \"light-content\" : \"dark-content\"\n  }), React.createElement(View, {\n    style: [styles.completo, {\n      backgroundColor: colors.background,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }]\n  }, theme === \"light\" ? React.createElement(Lotiecarga, null) : React.createElement(LotiecargaDark, null)));\n};\n\nexport default PantallaCarga;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/PantallaCarga.tsx"],"names":["React","useState","readMnemonic","createAccount","fetchSecret","useTheme","styles","Lotiecarga","LotiecargaDark","PantallaCarga","navigation","Appearance","getColorScheme","theme","setTheme","addChangeListener","scheme","colorScheme","colors","palabras","setPalabras","leerMnemonic","mnemonic","then","value","crearCuenta","acc","setTimeout","navigate","body","backgroundColor","background","completo","justifyContent","alignItems"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,WAAtC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT;AACA,SAASC,UAAT,EAAqBC,cAArB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAyC;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;;AAE7D,kBAA0BT,QAAQ,CAACU,UAAU,CAACC,cAAX,EAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACAH,EAAAA,UAAU,CAACI,iBAAX,CAA6B,UAACC,MAAD,EAAY;AACvCF,IAAAA,QAAQ,CAACE,MAAM,CAACC,WAAR,CAAR;AACD,GAFD;;AAGA,kBAAmBZ,QAAQ,EAA3B;AAAA,MAAQa,MAAR,aAAQA,MAAR;;AAEA,mBAAgCjB,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOkB,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,QADR,GACmBpB,YAAY,EAD/B;AAEEoB,YAAAA,QAAQ,CAACC,IAAT,CAAc,UAACC,KAAD,EAAW;AACvBJ,cAAAA,WAAW,CAACI,KAAD,CAAX;AACD,aAFD;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOAH,EAAAA,YAAY;;AAGZ,WAAeI,WAAf,CAA2BH,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQI,YAAAA,GADR,GACcvB,aAAa,CAACmB,QAAD,CAD3B;AAEElB,YAAAA,WAAW,CAACkB,QAAD,CAAX;AACAI,YAAAA,GAAG,CAACH,IAAJ,CAAS,UAACC,KAAD,EAAW;AAClBG,cAAAA,UAAU,CAAC,YAAM;AACfjB,gBAAAA,UAAU,CAACkB,QAAX,CAAoB,OAApB;AACD,eAFS,EAEP,IAFO,CAAV;AAGD,aAJD;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYAD,EAAAA,UAAU,CAAC,YAAM;AACfF,IAAAA,WAAW,CAACN,QAAD,CAAX;AACD,GAFS,EAEP,IAFO,CAAV;AAIA,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,CAACb,MAAM,CAACuB,IAAR,EAAc;AAAEC,MAAAA,eAAe,EAAEZ,MAAM,CAACa;AAA1B,KAAd;AAArB,KACE,oBAAC,SAAD;AACE,IAAA,eAAe,EAAEb,MAAM,CAACa,UAD1B;AAEE,IAAA,QAAQ,EAAElB,KAAK,KAAK,MAAV,GAAmB,eAAnB,GAAqC;AAFjD,IADF,EAKE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLP,MAAM,CAAC0B,QADF,EAEL;AACEF,MAAAA,eAAe,EAAEZ,MAAM,CAACa,UAD1B;AAEEE,MAAAA,cAAc,EAAE,QAFlB;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAFK;AADT,KAUGrB,KAAK,KAAK,OAAV,GAAoB,oBAAC,UAAD,OAApB,GAAqC,oBAAC,cAAD,OAVxC,CALF,CADF;AAoBD,CAxDD;;AA0DA,eAAeJ,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { View, Appearance, SafeAreaView, StatusBar } from \"react-native\";\nimport { readMnemonic, createAccount, fetchSecret } from \"../../api\";\nimport { useTheme } from \"react-native-paper\";\nimport { styles } from \"../theme/appTheme\";\nimport { Lotiecarga, LotiecargaDark } from \"./component/lottie\";\n\nconst PantallaCarga = ({ navigation }: { navigation: any }) => {\n  //Detecta el modo del sistema\n  const [theme, setTheme] = useState(Appearance.getColorScheme());\n  Appearance.addChangeListener((scheme) => {\n    setTheme(scheme.colorScheme);\n  });\n  const { colors } = useTheme();\n\n  const [palabras, setPalabras] = useState(\"\");\n\n  async function leerMnemonic() {\n    const mnemonic = readMnemonic();\n    mnemonic.then((value) => {\n      setPalabras(value);\n    });\n  }\n\n  leerMnemonic();\n\n  //Crear cuenta\n  async function crearCuenta(mnemonic: string) {\n    const acc = createAccount(mnemonic);\n    fetchSecret(mnemonic)\n    acc.then((value) => {\n      setTimeout(() => {\n        navigation.navigate(\"Barra\");\n      }, 2000);\n    });\n  }\n\n  \n\n  setTimeout(() => {\n    crearCuenta(palabras);\n  }, 2000);\n\n  return (\n    <SafeAreaView style={[styles.body, { backgroundColor: colors.background }]}>\n      <StatusBar\n        backgroundColor={colors.background}\n        barStyle={theme === \"dark\" ? \"light-content\" : \"dark-content\"}\n      />\n      <View\n        style={[\n          styles.completo,\n          {\n            backgroundColor: colors.background,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          },\n        ]}\n      >\n        {theme === \"light\" ? <Lotiecarga /> : <LotiecargaDark />}\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default PantallaCarga;\n"]},"metadata":{},"sourceType":"module"}