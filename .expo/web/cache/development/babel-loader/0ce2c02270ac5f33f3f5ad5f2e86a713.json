{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"@expo/vector-icons/FontAwesome5\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport AppIntroSlider from \"react-native-app-intro-slider\";\nimport { useTheme } from 'react-native-paper';\nimport { readMnemonic } from \"../../api\";\nvar altura = Platform.OS === \"ios\" ? 22 : 25;\n\nvar Slider = function Slider(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(Appearance.getColorScheme()),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  Appearance.addChangeListener(function (scheme) {\n    setTheme(scheme.colorScheme);\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mnemonic = _useState4[0],\n      setMnemonic = _useState4[1];\n\n  function leerMnemonic() {\n    var frase;\n    return _regeneratorRuntime.async(function leerMnemonic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            frase = readMnemonic();\n            frase.then(function (value) {\n              setMnemonic(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  leerMnemonic();\n\n  var RenderItem = function RenderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(SafeAreaView, {\n      style: [styles.body, {\n        backgroundColor: colors.background\n      }]\n    }, React.createElement(StatusBar, {\n      backgroundColor: colors.background,\n      barStyle: theme === 'dark' ? \"light-content\" : \"dark-content\"\n    }), React.createElement(View, {\n      style: [styles.completo, {\n        backgroundColor: colors.background\n      }]\n    }, React.createElement(Image, {\n      style: styles.introImageStyle,\n      source: item.image\n    }), React.createElement(View, {\n      style: styles.cajatitle\n    }, React.createElement(Text, {\n      style: [styles.introTitleStyle, {\n        color: colors.accent\n      }]\n    }, item.title)), React.createElement(View, {\n      style: styles.cajatxt\n    }, React.createElement(Text, {\n      style: [styles.introTextStyle, {\n        color: colors.accent\n      }]\n    }, item.text)), item.key == \"s3\" && React.createElement(View, {\n      style: styles.cajadone\n    }, React.createElement(TouchableOpacity, {\n      activeOpacity: 0.5,\n      style: styles.btndo,\n      onPress: function onPress() {\n        return navigation.navigate(\"Crear\", {\n          msg: mnemonic\n        });\n      }\n    }, React.createElement(Icon, {\n      name: \"arrow-right\",\n      size: altura,\n      color: \"#440577\"\n    })))));\n  };\n\n  var renderdone = function renderdone() {\n    return React.createElement(React.Fragment, null);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(AppIntroSlider, {\n    data: slides,\n    renderItem: RenderItem,\n    showNextButton: false,\n    showDoneButton: false,\n    renderDoneButton: renderdone,\n    dotStyle: styles.dotst,\n    activeDotStyle: [styles.actist, {\n      backgroundColor: colors.primary\n    }]\n  }));\n};\n\nvar slides = [{\n  key: \"s1\",\n  title: \"La frase de recuperación es un respaldo para tu cartera\",\n  text: \"Podrás iniciar sesión con tu contraseña, pero necesitarás tu frase de recuperación para acceder\",\n  image: require(\"../screens/img/backup.png\")\n}, {\n  key: \"s2\",\n  title: \"Escribe tu frase de respaldo\",\n  text: \"Es de vital importancia que escribas y guardes la frase de recuperación para tu cartera en un lugar seguro\",\n  image: require(\"../screens/img/pencil.png\")\n}, {\n  key: \"s3\",\n  title: \"Evita compartir tu frase de respaldo.\",\n  text: \"Recuerda que es personal e intrasferible\",\n  image: require(\"../screens/img/seguridad.png\")\n}];\nexport default Slider;","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/Slider.tsx"],"names":["React","useState","styles","Icon","AppIntroSlider","useTheme","readMnemonic","altura","Platform","OS","Slider","navigation","route","Appearance","getColorScheme","theme","setTheme","addChangeListener","scheme","colorScheme","colors","mnemonic","setMnemonic","leerMnemonic","frase","then","value","RenderItem","item","body","backgroundColor","background","completo","introImageStyle","image","cajatitle","introTitleStyle","color","accent","title","cajatxt","introTextStyle","text","key","cajadone","btndo","navigate","msg","renderdone","slides","dotst","actist","primary","require"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { styles } from \"../theme/appTheme\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\nimport { View, Text, Image, TouchableOpacity, Platform,SafeAreaView,StatusBar, Appearance  } from \"react-native\";\n\n//import AppIntroSlider to use it\nimport AppIntroSlider from \"react-native-app-intro-slider\";\nimport { useTheme } from 'react-native-paper';\nimport { readMnemonic } from \"../../api\";\n\nconst altura = Platform.OS === \"ios\" ? 22 : 25;\n\nconst Slider = ({ navigation, route }: { navigation: any; route: any }) => {\n  //Detecta el modo del sistema\n  const [theme,setTheme] = useState(Appearance.getColorScheme());\n  Appearance.addChangeListener((scheme)=>{\n    setTheme(scheme.colorScheme);\n  })\n  const { colors } = useTheme();\n\n  const [mnemonic, setMnemonic] = useState(\"\")\n\n\nasync function leerMnemonic() {\n  const frase = readMnemonic();\n  frase.then((value) =>{\n    setMnemonic(value)\n  })\n}\n\nleerMnemonic()\n\n  const RenderItem = ({ item }) => {\n    return (\n      <SafeAreaView style={[styles.body,{backgroundColor:colors.background}]}>\n        <StatusBar \n          backgroundColor= {colors.background}\n          barStyle={theme === 'dark' ?  \"light-content\" : \"dark-content\"} \n        />\n        <View style={[styles.completo,{backgroundColor:colors.background}]}>\n          <Image style={styles.introImageStyle} source={item.image} />\n          <View style={styles.cajatitle}>\n            <Text style={[styles.introTitleStyle,{color:colors.accent}]}>{item.title}</Text>\n          </View>\n          <View style={styles.cajatxt}>\n            <Text style={[styles.introTextStyle,{color:colors.accent}]}>{item.text}</Text>\n          </View>\n          {item.key == \"s3\" && (\n            <View style={styles.cajadone}>\n              <TouchableOpacity\n                activeOpacity={0.5}\n                style={styles.btndo}\n                onPress={() => navigation.navigate(\"Crear\",{msg:mnemonic})}\n              >\n                <Icon name=\"arrow-right\" size={altura} color=\"#440577\" />\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n      </SafeAreaView >\n    );\n  };\n\n  const renderdone = () => {\n    return <></>;\n  };\n\n  return (\n    <>\n      <AppIntroSlider\n        data={slides}\n        renderItem={RenderItem}\n        showNextButton={false}\n        showDoneButton={false}\n        renderDoneButton={renderdone}\n        dotStyle={styles.dotst}\n        activeDotStyle={[styles.actist,{backgroundColor:colors.primary}]}\n      />\n    </>\n  );\n};\n\nconst slides = [\n  {\n    key: \"s1\",\n    title: \"La frase de recuperación es un respaldo para tu cartera\",\n    text: \"Podrás iniciar sesión con tu contraseña, pero necesitarás tu frase de recuperación para acceder\",\n    image: require(\"../screens/img/backup.png\"),\n  },\n  {\n    key: \"s2\",\n    title: \"Escribe tu frase de respaldo\",\n    text: \"Es de vital importancia que escribas y guardes la frase de recuperación para tu cartera en un lugar seguro\",\n    image: require(\"../screens/img/pencil.png\"),\n  },\n  {\n    key: \"s3\",\n    title: \"Evita compartir tu frase de respaldo.\",\n    text: \"Recuerda que es personal e intrasferible\",\n    image: require(\"../screens/img/seguridad.png\"),\n  },\n];\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}