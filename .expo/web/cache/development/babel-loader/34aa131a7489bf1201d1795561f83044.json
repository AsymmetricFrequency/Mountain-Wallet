{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as solanaWeb3 from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey } from '@solana/web3.js';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\";\nvar SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nvar LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL;\n\nfunction saveKey(data) {\n  return _regeneratorRuntime.async(function saveKey$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.t0 = console;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Key', data));\n\n        case 4:\n          _context.t1 = _context.sent;\n\n          _context.t0.log.call(_context.t0, _context.t1);\n\n          _context.next = 10;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t2 = _context[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction readKey() {\n  var key;\n  return _regeneratorRuntime.async(function readKey$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Key'));\n\n        case 3:\n          key = _context2.sent;\n          return _context2.abrupt(\"return\", key);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction savePublicKey(data) {\n  return _regeneratorRuntime.async(function savePublicKey$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.t0 = console;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_PublicKey', data));\n\n        case 4:\n          _context3.t1 = _context3.sent;\n\n          _context3.t0.log.call(_context3.t0, _context3.t1);\n\n          _context3.next = 10;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t2 = _context3[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction readPublicKey() {\n  var key;\n  return _regeneratorRuntime.async(function readPublicKey$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_PublicKey'));\n\n        case 3:\n          key = _context4.sent;\n          return _context4.abrupt(\"return\", key);\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction saveMmemonic(data) {\n  return _regeneratorRuntime.async(function saveMmemonic$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.t0 = console;\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Mnemonic', data));\n\n        case 4:\n          _context5.t1 = _context5.sent;\n\n          _context5.t0.log.call(_context5.t0, _context5.t1);\n\n          _context5.next = 10;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t2 = _context5[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction readMnemonic() {\n  var key;\n  return _regeneratorRuntime.async(function readMnemonic$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Mnemonic'));\n\n        case 3:\n          key = _context6.sent;\n          return _context6.abrupt(\"return\", key);\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction savePassword(data) {\n  return _regeneratorRuntime.async(function savePassword$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.t0 = console;\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@storage_Pass', data));\n\n        case 4:\n          _context7.t1 = _context7.sent;\n\n          _context7.t0.log.call(_context7.t0, _context7.t1);\n\n          _context7.next = 10;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t2 = _context7[\"catch\"](0);\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\n\nfunction readPassword() {\n  var password;\n  return _regeneratorRuntime.async(function readPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@storage_Pass'));\n\n        case 3:\n          password = _context8.sent;\n          return _context8.abrupt(\"return\", password);\n\n        case 7:\n          _context8.prev = 7;\n          _context8.t0 = _context8[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nfunction generateMnemonic() {\n  return _regeneratorRuntime.async(function generateMnemonic$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          fetch(\"https://apiwalletnode.herokuapp.com/mnemonic\").then(function (res) {\n            return res.text();\n          }).then(function (data) {\n            saveMmemonic(data);\n            return data;\n          });\n\n        case 1:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createAccount(mnemonic) {\n  return _regeneratorRuntime.async(function createAccount$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          fetch(\"https://apiwalletnode.herokuapp.com/keypair_public_key/\" + mnemonic).then(function (res) {\n            return res.text();\n          }).then(function (data) {\n            savePublicKey(data);\n            return data;\n          });\n\n        case 1:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchSecret(mnemonic) {\n  return _regeneratorRuntime.async(function fetchSecret$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          fetch(\"https://apiwalletnode.herokuapp.com/keypair_secret_key/\" + mnemonic).then(function (res) {\n            return res.text();\n          }).then(function (data) {\n            saveKey(data);\n            return data;\n          });\n\n        case 1:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sendSoles(mnemonic, toPublicKey, amount) {\n  var response, text;\n  return _regeneratorRuntime.async(function sendSoles$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://apiwalletnode.herokuapp.com/send_transaction/\" + mnemonic + \"/\" + toPublicKey + \"/\" + amount));\n\n        case 2:\n          response = _context12.sent;\n          _context12.next = 5;\n          return _regeneratorRuntime.awrap(response.text());\n\n        case 5:\n          text = _context12.sent;\n          return _context12.abrupt(\"return\", text);\n\n        case 7:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sendSPL(mnemonic, toPublicKey, amount, mint) {\n  var response, text;\n  return _regeneratorRuntime.async(function sendSPL$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://apiwalletnode.herokuapp.com/send_transaction_spl/\" + mnemonic + \"/\" + toPublicKey + \"/\" + amount + \"/\" + mint));\n\n        case 2:\n          response = _context13.sent;\n          _context13.next = 5;\n          return _regeneratorRuntime.awrap(response.text());\n\n        case 5:\n          text = _context13.sent;\n          return _context13.abrupt(\"return\", text);\n\n        case 7:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createConnection(cluster) {\n  return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster));\n}\n\nfunction getBalance(publicKey) {\n  var connection, lamports, sol;\n  return _regeneratorRuntime.async(function getBalance$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context14.next = 3;\n          return _regeneratorRuntime.awrap(connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          lamports = _context14.sent;\n          sol = lamports / LAMPORTS_PER_SOL;\n          return _context14.abrupt(\"return\", sol);\n\n        case 6:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  return _regeneratorRuntime.async(function findAssociatedTokenAddress$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return _regeneratorRuntime.awrap(solanaWeb3.PublicKey.findProgramAddress([walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID));\n\n        case 2:\n          return _context15.abrupt(\"return\", _context15.sent[0]);\n\n        case 3:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getToken(publicKey, splToken) {\n  var connection, account, balance;\n  return _regeneratorRuntime.async(function getToken$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          connection = createConnection(\"devnet\");\n          _context16.next = 3;\n          return _regeneratorRuntime.awrap(findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken)));\n\n        case 3:\n          account = _context16.sent;\n          _context16.prev = 4;\n          _context16.next = 7;\n          return _regeneratorRuntime.awrap(connection.getTokenAccountBalance(new PublicKey(account.toString())));\n\n        case 7:\n          balance = _context16.sent;\n          return _context16.abrupt(\"return\", balance.value.uiAmount);\n\n        case 11:\n          _context16.prev = 11;\n          _context16.t0 = _context16[\"catch\"](4);\n          return _context16.abrupt(\"return\", 0);\n\n        case 14:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, [[4, 11]], Promise);\n}\n\nfunction getHistory(pubKey) {\n  var options,\n      connection,\n      history,\n      _args17 = arguments;\n  return _regeneratorRuntime.async(function getHistory$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {\n            limit: 20\n          };\n          connection = createConnection(\"mainnet-beta\");\n          _context17.next = 4;\n          return _regeneratorRuntime.awrap(connection.getConfirmedSignaturesForAddress2(new PublicKey(pubKey), options));\n\n        case 4:\n          history = _context17.sent;\n          console.log(history);\n          return _context17.abrupt(\"return\", history);\n\n        case 7:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { savePublicKey, readPublicKey, generateMnemonic, createAccount, getBalance, getToken, saveKey, readKey, getHistory, saveMmemonic, readMnemonic, savePassword, readPassword, fetchSecret, sendSoles, sendSPL };","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/api/index.ts"],"names":["solanaWeb3","TOKEN_PROGRAM_ID","PublicKey","AsyncStorage","SPL_TOKEN","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","LAMPORTS_PER_SOL","saveKey","data","console","setItem","log","readKey","getItem","key","savePublicKey","readPublicKey","saveMmemonic","readMnemonic","savePassword","readPassword","password","generateMnemonic","fetch","then","res","text","createAccount","mnemonic","fetchSecret","sendSoles","toPublicKey","amount","response","sendSPL","mint","createConnection","cluster","Connection","clusterApiUrl","getBalance","publicKey","connection","catch","err","lamports","sol","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","getToken","splToken","account","getTokenAccountBalance","toString","balance","value","uiAmount","getHistory","pubKey","options","limit","getConfirmedSignaturesForAddress2","history"],"mappings":"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","sourcesContent":["import * as solanaWeb3 from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { PublicKey, Keypair } from '@solana/web3.js';\n\nimport  AsyncStorage  from \"@react-native-async-storage/async-storage\";\n\n//variables\nconst SPL_TOKEN = \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\"\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new solanaWeb3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\")\nconst LAMPORTS_PER_SOL = solanaWeb3.LAMPORTS_PER_SOL                                                                     \n\n//Funcion guardar llave\nasync function saveKey(data){\n  try {\n    console.log(await AsyncStorage.setItem('@storage_Key', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion leer llave\nasync function readKey(){\n  //obteniendo llave\n  try {\n    const key = await AsyncStorage.getItem('@storage_Key')\n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion guardar llave\nasync function savePublicKey(data){\n  try {\n    console.log(await AsyncStorage.setItem('@storage_PublicKey', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Leer la public key de la cuenta\nasync function readPublicKey(){\n  //obteniendo llave\n  try {\n    const key = await AsyncStorage.getItem('@storage_PublicKey')\n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n\n//Funcion guardar llave\nasync function saveMmemonic(data){\n  try {   \n    console.log(await AsyncStorage.setItem('@storage_Mnemonic', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion leer llave\nasync function readMnemonic(){\n  //obteniendo llave\n  try {\n    const key = await AsyncStorage.getItem('@storage_Mnemonic')\n    return key \n  } catch (e) { \n       // saving error  \n  }\n}\n\n\n//Funcion guardar contra\nasync function savePassword(data){\n  try {\n    console.log(await AsyncStorage.setItem('@storage_Pass', data))  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n//Funcion guardar contra\nasync function readPassword(){\n  //obteniendo contra\n  try {\n    const password = await AsyncStorage.getItem('@storage_Pass')\n    return password  \n  } catch (e) { \n       // saving error  \n  }\n}\n\n////////////////////////////////////////////////////////////\n//  Funciones de Solana-web3 para la creacion de cuentas  //\n////  obtener el balance y transferir SOL y SPL Tokens  ////\n////////////////////////////////////////////////////////////\n\n\n//generar mnemonic\nasync function generateMnemonic() {\n  fetch(\"https://apiwalletnode.herokuapp.com/mnemonic\").then(\n      res => res.text()\n  ).then(\n    data =>{\n      //guardando mnemonic en asyncStorage\n      saveMmemonic(data) \n      return data\n    }   \n  )\n}\n\n//Crear cuenta (public key)\nasync function createAccount(mnemonic: string) {\n  fetch(`https://apiwalletnode.herokuapp.com/keypair_public_key/${mnemonic}`).then(\n      res => res.text()\n  ).then(\n    data =>{\n      savePublicKey(data)\n      return data\n    }   \n  )\n}\n\n//Crear cuenta (secret key)\nasync function fetchSecret(mnemonic: string) {\n  fetch(`https://apiwalletnode.herokuapp.com/keypair_secret_key/${mnemonic}`).then(\n      res => res.text()\n  ).then(\n    data =>{\n      saveKey(data)\n      return data\n    }   \n  )\n}\n\nasync function sendSoles(mnemonic: string, toPublicKey: string, amount: number){\n  const response = await fetch(`https://apiwalletnode.herokuapp.com/send_transaction/${mnemonic}/${toPublicKey}/${amount}`)\n  const text = await response.text()\n  return text\n}\n\nasync function sendSPL(mnemonic: string, toPublicKey: string, amount: number, mint: string){\n  const response = await fetch(`https://apiwalletnode.herokuapp.com/send_transaction_spl/${mnemonic}/${toPublicKey}/${amount}/${mint}`)\n  const text = await response.text()\n  return text\n}\n\n//crear conexion\nfunction createConnection(cluster:string) {\n  return new solanaWeb3.Connection(solanaWeb3.clusterApiUrl(cluster))\n}\n\n//obtener balance de Solanas\nasync function getBalance(publicKey: string) {\n  const connection = createConnection(\"devnet\")\n  const lamports = await connection.getBalance(new solanaWeb3.PublicKey(publicKey)).catch((err) => {\n    console.log(err);\n  })\n\n  const sol = lamports / LAMPORTS_PER_SOL\n  return sol\n} \n\n//buscar cuentas asociadas a tokens\nasync function findAssociatedTokenAddress(\n    walletAddress: PublicKey,\n    tokenMintAddress: PublicKey\n  ): Promise<PublicKey> {\n    return (\n      await solanaWeb3.PublicKey.findProgramAddress(\n        [\n          walletAddress.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n          tokenMintAddress.toBuffer(),\n        ],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  }\n\n//obtener balance del token\nasync function getToken(publicKey: string, splToken: string){\n    const connection = createConnection(\"devnet\")\n    const account = await findAssociatedTokenAddress(new PublicKey(publicKey), new PublicKey(splToken))\n\n  try {\n    const balance = await connection.getTokenAccountBalance(new PublicKey(account.toString()))\n    return balance.value.uiAmount\n  } catch (e) {\n    return 0\n  }\n\n}\n\n// funcion para obtener el historial de transacciones\nasync function getHistory(pubKey:string,options = { limit: 20 }){\n\n  const connection = createConnection(\"mainnet-beta\");\n  const history = await connection.getConfirmedSignaturesForAddress2(\n  new PublicKey(pubKey),\n  options\n  );\n\n  console.log(history);\n  \n  return history;\n\n}\n\n\nexport { \n  savePublicKey,\n  readPublicKey,\n  generateMnemonic,\n  createAccount,\n  getBalance,\n  getToken,\n  saveKey,\n  readKey,\n  getHistory,\n  saveMmemonic,\n  readMnemonic,\n  savePassword, \n  readPassword,\n  fetchSecret,\n  sendSoles,\n  sendSPL\n}\n"]},"metadata":{},"sourceType":"module"}