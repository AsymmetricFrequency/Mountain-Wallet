{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport \"react-native-url-polyfill/auto\";\nimport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken, sendTokenTransaction, readKey, getHistory } from \"./api\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Balance from \"./src/screens/Balance\";\nimport Crearcuenta from \"./src/screens/Crearcuenta\";\nimport Home from \"./src/screens/Home\";\nimport ImportarCuenta from \"./src/screens/Importarcuenta\";\nimport Importar from \"./src/screens/Importar\";\nimport CodigoVerificacion from \"./src/screens/CodigoVerificacion\";\nimport Recibir from \"./src/screens/Recibir\";\nimport PassLogin from \"./src/screens/PassLogin\";\nimport QrReader from \"./src/screens/QrReader\";\nimport PantallaCarga from \"./src/screens/PantallaCarga\";\nexport default function App() {\n  var Stack = createNativeStackNavigator();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mnemonic = _useState2[0],\n      setMnemonic = _useState2[1];\n\n  function generarMnemonic() {\n    var memo = generateMnemonic();\n    memo.then(function (value) {\n      console.log(value);\n      setMnemonic(value);\n    });\n  }\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seed = _useState4[0],\n      setSeed = _useState4[1];\n\n  function generarSeed(mnemonic) {\n    mnemonicToSeed(mnemonic).then(function (value) {\n      setSeed(value);\n    });\n  }\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      publicKey = _useState6[0],\n      setPublicKey = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      account = _useState8[0],\n      setAccount = _useState8[1];\n\n  function generarCuenta(seed) {\n    createAccount(seed).then(function (hexValue) {\n      console.log(hexValue.publicKey.toString());\n      setPublicKey(hexValue.publicKey.toString());\n      setAccount(hexValue);\n      console.log(hexValue);\n    });\n  }\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      balance = _useState10[0],\n      setBalance = _useState10[1];\n\n  function obtenerBalance(publicKey) {\n    return _regeneratorRuntime.async(function obtenerBalance$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            getBalance(publicKey).then(function (value) {\n              console.log(value);\n              setBalance(value);\n            }).catch(function (error) {\n              console.log(error);\n              return \"error\";\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      tokenBalance = _useState12[0],\n      setTokenBalance = _useState12[1];\n\n  function obtenerTokenB(publicKey, mint) {\n    var bala;\n    return _regeneratorRuntime.async(function obtenerTokenB$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            bala = getToken(publicKey, mint).then(function (value) {\n              setTokenBalance(value);\n              console.log(value);\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendToken() {\n    var send;\n    return _regeneratorRuntime.async(function sendToken$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            send = sendTokenTransaction(\"uja3w9XG1g6DQSVT6YASK99FVmdVwXoHVoQEgtEJdLv\", \"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\", 1);\n            send.then(function (value) {\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      his = _useState14[0],\n      setHis = _useState14[1];\n\n  function historial(pubKey) {\n    var send;\n    return _regeneratorRuntime.async(function historial$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            send = getHistory(pubKey);\n            send.then(function (value) {\n              setHis(value[0].signature.toString());\n              console.log(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var _useState15 = useState(\"\"),\n      _useState16 = _slicedToArray(_useState15, 2),\n      llave = _useState16[0],\n      setLlave = _useState16[1];\n\n  readKey().then(function (value) {\n    setLlave(value);\n  });\n\n  if (llave != null && llave != '' && llave != undefined) {\n    return React.createElement(NavigationContainer, null, React.createElement(Stack.Navigator, null, React.createElement(Stack.Screen, {\n      name: \"Pass\",\n      component: PassLogin,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Balance\",\n      component: Balance,\n      options: {\n        headerShown: false,\n        gestureEnabled: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Recibir\",\n      component: Recibir,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Enviar\",\n      component: Importar,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"QrReader\",\n      component: QrReader,\n      options: {\n        headerShown: false\n      }\n    })));\n  } else {\n    return React.createElement(NavigationContainer, null, React.createElement(Stack.Navigator, null, React.createElement(Stack.Screen, {\n      name: \"Home\",\n      component: Home,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"ImportarCuenta\",\n      component: ImportarCuenta,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Crear\",\n      component: Crearcuenta,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"PantallaCarga\",\n      component: PantallaCarga,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"CrearPass\",\n      component: CodigoVerificacion,\n      options: {\n        headerShown: false,\n        gestureEnabled: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Balance\",\n      component: Balance,\n      options: {\n        headerShown: false,\n        gestureEnabled: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Recibir\",\n      component: Recibir,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Enviar\",\n      component: Importar,\n      options: {\n        headerShown: false\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"QrReader\",\n      component: QrReader,\n      options: {\n        headerShown: false\n      }\n    })));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 30\n  },\n  boton: {\n    marginTop: 50\n  }\n});","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/App.tsx"],"names":["React","useState","generateMnemonic","mnemonicToSeed","createAccount","getBalance","getToken","sendTokenTransaction","readKey","getHistory","NavigationContainer","createNativeStackNavigator","Balance","Crearcuenta","Home","ImportarCuenta","Importar","CodigoVerificacion","Recibir","PassLogin","QrReader","PantallaCarga","App","Stack","mnemonic","setMnemonic","generarMnemonic","memo","then","value","console","log","seed","setSeed","generarSeed","publicKey","setPublicKey","account","setAccount","generarCuenta","hexValue","toString","balance","setBalance","obtenerBalance","catch","error","tokenBalance","setTokenBalance","obtenerTokenB","mint","bala","sendToken","send","his","setHis","historial","pubKey","signature","llave","setLlave","undefined","headerShown","gestureEnabled","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","margin","boton","marginTop"],"mappings":"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","sourcesContent":["import { Keypair } from '@solana/web3.js';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Button } from 'react-native';\nimport \"react-native-url-polyfill/auto\";\n\n\nimport { generateMnemonic, mnemonicToSeed, createAccount, getBalance, getToken,sendTokenTransaction,saveKey, readKey,getHistory } from './api';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n//screens\nimport Balance from './src/screens/Balance';\nimport Crearcuenta from './src/screens/Crearcuenta';\nimport Home from './src/screens/Home';\nimport ImportarCuenta from './src/screens/Importarcuenta';\nimport Importar from './src/screens/Importar';\nimport CodigoVerificacion from './src/screens/CodigoVerificacion'\nimport Recibir from './src/screens/Recibir';\nimport Splashc from './src/screens/Splashc';\nimport PassLogin from './src/screens/PassLogin'\nimport QrReader from './src/screens/QrReader';\nimport PantallaCarga from './src/screens/PantallaCarga';\n\n\nexport default function App() { \n\n  const Stack = createNativeStackNavigator();\n\n  //Funcion de generar 12 palabras\n  const [mnemonic, setMnemonic] = useState(\"\")\n\n  function generarMnemonic(){\n    const memo = generateMnemonic()\n    memo.then((value) => {\n      console.log(value)\n      setMnemonic(value)\n    })\n  }\n\n  //Funcion semilla desde 12 palabras\n  const [seed, setSeed] = useState(\"\")\n\n\n  function generarSeed(mnemonic: string) {\n    mnemonicToSeed(mnemonic).then((value) => {\n      //guardar llave\n      setSeed(value)\n    })\n  }\n\n  //Funcion para crear cuenta\n  const [publicKey, setPublicKey] = useState(\"\")\n  const [account, setAccount] = useState()\n\n  function generarCuenta(seed) {\n    createAccount(seed).then((hexValue) => {\n      console.log(hexValue.publicKey.toString())\n      setPublicKey(hexValue.publicKey.toString())\n      setAccount(hexValue)\n      console.log(hexValue)\n    })\n  }\n  \n  \n  //Funcion obtener balance\n  const [balance, setBalance] = useState(0)\n\n  async function obtenerBalance(publicKey: string) {\n    getBalance(publicKey).then((value) => {\n      console.log(value)\n      setBalance(value)\n    }).catch((error) => {\n      console.log(error);\n      return \"error\"\n    })\n  }\n\n  //Funcion de obtener splToken\n  const [tokenBalance, setTokenBalance] = useState(0)\n\n  async function obtenerTokenB(publicKey:string, mint:string) {\n    const bala = getToken(publicKey, mint).then((value) => {\n      setTokenBalance(value)\n      console.log(value);\n    })\n  }\n\n  //Funcion enviar token\n  async function sendToken(){\n    const send = sendTokenTransaction(\"uja3w9XG1g6DQSVT6YASK99FVmdVwXoHVoQEgtEJdLv\",\"7TMzmUe9NknkeS3Nxcx6esocgyj8WdKyEMny9myDGDYJ\",1)\n    send.then((value) => {\n      console.log(value);\n    })\n  } \n\n  //Funcion obtener historial\n  const [his,setHis] = useState(\"\")\n\n  async function historial(pubKey:string){\n    const send = getHistory(pubKey)\n    send.then((value) => {      \n      setHis(value[0].signature.toString())\n      console.log(value);\n    })\n  }\n  \n  const [llave, setLlave] = useState(\"\")\n  \n  readKey().then((value) => {\n    setLlave(value)\n  })\n\n  if (llave != null && llave != '' && llave != undefined) {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name=\"Pass\" component={PassLogin} options={{headerShown: false}}/>\n          <Stack.Screen name=\"Balance\" component={Balance} options={{headerShown: false, gestureEnabled: false}}/>\n          <Stack.Screen name=\"Recibir\" component={Recibir} options={{headerShown: false}}/>\n          <Stack.Screen name=\"Enviar\" component={Importar} options={{headerShown: false}}/>\n          <Stack.Screen name=\"QrReader\" component={QrReader} options={{headerShown: false}}/>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  } else {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name=\"Home\" component={Home} options={{headerShown: false}}/>\n          <Stack.Screen name=\"ImportarCuenta\" component={ImportarCuenta} options={{headerShown: false}}/>\n          <Stack.Screen name=\"Crear\" component={Crearcuenta} options={{headerShown: false}}/>\n          <Stack.Screen name=\"PantallaCarga\" component={PantallaCarga} options={{headerShown: false}}/>\n          <Stack.Screen name=\"CrearPass\" component={CodigoVerificacion} options={{headerShown: false, gestureEnabled: false}}/>\n          <Stack.Screen name=\"Balance\" component={Balance} options={{headerShown: false, gestureEnabled: false}}/>\n          <Stack.Screen name=\"Recibir\" component={Recibir} options={{headerShown: false}}/>\n          <Stack.Screen name=\"Enviar\" component={Importar} options={{headerShown: false}}/>\n          <Stack.Screen name=\"QrReader\" component={QrReader} options={{headerShown: false}}/>\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 30\n  },\n  boton: {\n    marginTop: 50\n  }\n});\n"]},"metadata":{},"sourceType":"module"}