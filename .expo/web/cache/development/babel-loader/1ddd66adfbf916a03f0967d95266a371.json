{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { readMnemonic, createAccount, savePublicKey, mnemonicToSeed } from \"../../api\";\nimport LottieView from 'lottie-react-native';\nimport { RFValue } from 'react-native-responsive-fontsize';\n\nvar PantallaCarga = function PantallaCarga(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      palabras = _useState2[0],\n      setPalabras = _useState2[1];\n\n  function leerMnemonic() {\n    var mnemonic;\n    return _regeneratorRuntime.async(function leerMnemonic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mnemonic = readMnemonic();\n            mnemonic.then(function (value) {\n              setPalabras(value);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  leerMnemonic();\n\n  function crearCuenta(palabras) {\n    var docePalabras;\n    return _regeneratorRuntime.async(function crearCuenta$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            docePalabras = mnemonicToSeed(palabras);\n            docePalabras.then(function (value) {\n              var acc = createAccount(value);\n              acc.then(function (value) {\n                savePublicKey(value.publicKey.toString());\n                setTimeout(function () {\n                  navigation.navigate('Balance');\n                }, 2000);\n              });\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  setTimeout(function () {\n    crearCuenta(palabras);\n  }, 2000);\n  return React.createElement(View, {\n    style: styles.body\n  }, React.createElement(View, {\n    style: styles.body\n  }, React.createElement(LottieView, {\n    style: styles.lottie,\n    source: require(\"./Lottie/flowerCarga.json\"),\n    autoPlay: true\n  })));\n};\n\nexport default PantallaCarga;\nvar styles = StyleSheet.create({\n  body: {\n    width: '100%',\n    height: '100%',\n    flex: 1,\n    paddingTop: '8%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  txtcarga: {\n    top: RFValue(90),\n    fontSize: RFValue(18)\n  },\n  fondo: {\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  lottie: {\n    width: 200,\n    height: 200,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nfunction txtcarga() {\n  throw new Error('Function not implemented.');\n}\n\nfunction generaFrase(palabras) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"sources":["/home/m/Desktop/Mountain-Wallet/src/screens/PantallaCarga.tsx"],"names":["React","useState","readMnemonic","createAccount","savePublicKey","mnemonicToSeed","LottieView","RFValue","PantallaCarga","navigation","palabras","setPalabras","leerMnemonic","mnemonic","then","value","crearCuenta","docePalabras","acc","publicKey","toString","setTimeout","navigate","styles","body","lottie","require","StyleSheet","create","width","height","flex","paddingTop","alignItems","justifyContent","txtcarga","top","fontSize","fondo","Error","generaFrase"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { View, StyleSheet, ActivityIndicator, Text, ImageBackground, Image } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { readMnemonic, createAccount, savePublicKey, mnemonicToSeed } from '../../api';\nimport LottieView from 'lottie-react-native';\nimport { RFValue, RFPercentage } from 'react-native-responsive-fontsize';\nimport * as Animatable from 'react-native-animatable';\nimport * as Random from 'expo-random';\nimport { randomInt } from 'crypto';\n\n\nconst PantallaCarga = ({navigation}: {navigation: any}) => {\n\n    const [palabras, setPalabras] = useState(\"\")\n\n    async function leerMnemonic() {\n        const mnemonic = readMnemonic()\n        mnemonic.then((value) => {\n            setPalabras(value)\n        })\n    }\n\n    leerMnemonic()\n\n    //Crear cuenta\n    async function crearCuenta(palabras: string) {\n        const docePalabras = mnemonicToSeed(palabras)\n        docePalabras.then((value) => {\n            const acc = createAccount(value)\n            acc.then((value) => {\n                savePublicKey(value.publicKey.toString())\n                setTimeout(() => {\n                    navigation.navigate('Balance')\n                }, 2000)\n            })\n        })\n    }\n\n    setTimeout(() => {\n        crearCuenta(palabras)\n    }, 2000);\n    \n    return (\n        <View style={styles.body}>\n            <View style={styles.body}>\n                <LottieView\n                    style={styles.lottie}\n                    source={require(\"./Lottie/flowerCarga.json\")}\n                    autoPlay\n                />\n            </View>\n\n        </View>\n    )\n}\n\nexport default PantallaCarga\n\nconst styles = StyleSheet.create({\n    body: {\n        width: '100%',\n        height: '100%',\n        flex: 1,\n        paddingTop: '8%',\n        alignItems:'center',\n        justifyContent:'center'\n    },\n    txtcarga: {\n        top: RFValue(90),\n        fontSize:RFValue(18),\n    },\n    fondo:{\n        width: '100%',\n        height: '100%',\n        alignItems:'center',\n        justifyContent:'center'\n    },\n    lottie: {\n        width:200,\n        height:200,\n        alignItems:'center',\n        justifyContent:'center'\n    },\n})\nfunction txtcarga() {\n    throw new Error('Function not implemented.');\n}\n\nfunction generaFrase(palabras: string) {\n    throw new Error('Function not implemented.');\n}\n\n"]},"metadata":{},"sourceType":"module"}